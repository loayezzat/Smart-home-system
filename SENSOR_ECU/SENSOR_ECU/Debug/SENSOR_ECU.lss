
SENSOR_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000030c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800062  00800062  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b88  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c2  00000000  00000000  000018cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  000025a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  8a:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <receive_byte>:
}



void receive_byte (void) /*This function will be executed if a receive interrupt happens*/
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	receiveBuffer[receiveID] = UART_u8GetDataRegister() ; 
  96:	c0 91 65 00 	lds	r28, 0x0065	; 0x800065 <receiveID>
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	0e 94 2a 01 	call	0x254	; 0x254 <UART_u8GetDataRegister>
  a0:	cc 58       	subi	r28, 0x8C	; 140
  a2:	df 4f       	sbci	r29, 0xFF	; 255
  a4:	88 83       	st	Y, r24
	if (receiveBuffer[receiveID] == EOP)
  a6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <receiveID>
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ec 58       	subi	r30, 0x8C	; 140
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	93 32       	cpi	r25, 0x23	; 35
  b6:	41 f4       	brne	.+16     	; 0xc8 <receive_byte+0x36>
	{
		VOID_serveReceivedPacket () ;	/*serve data packet function*/
  b8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
  bc:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
  c0:	09 95       	icall
		receiveID = 0 ;
  c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <receiveID>
  c6:	03 c0       	rjmp	.+6      	; 0xce <receive_byte+0x3c>
	}else {
		receiveID++ ;
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <receiveID>
	}
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <transmitt_byte>:
	
}

static void transmitt_byte (void) 
{
	if (transmittState == 0 )
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  d8:	81 11       	cpse	r24, r1
  da:	15 c0       	rjmp	.+42     	; 0x106 <transmitt_byte+0x32>
	{
		if (transmittBuffer[transmittID] == EOP ){
  dc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <transmittID>
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e6 59       	subi	r30, 0x96	; 150
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	83 32       	cpi	r24, 0x23	; 35
  ea:	31 f4       	brne	.+12     	; 0xf8 <transmitt_byte+0x24>
			UART_voidSetDataRegister(transmittBuffer[transmittID]) ;
  ec:	0e 94 28 01 	call	0x250	; 0x250 <UART_voidSetDataRegister>
			transmittState = 1 ;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  f6:	08 95       	ret
			}else{
			UART_voidSetDataRegister(transmittBuffer[transmittID]) ;
  f8:	0e 94 28 01 	call	0x250	; 0x250 <UART_voidSetDataRegister>
			transmittID ++ ;
  fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <transmittID>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <transmittID>
 106:	08 95       	ret

00000108 <initComm>:

static void (*VOID_serveReceivedPacket)( void ) = NULL ;

void initComm(void) {
	
	UART_voidInit() ; 
 108:	0e 94 0c 01 	call	0x218	; 0x218 <UART_voidInit>
	receiveID = 0 ;
 10c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <receiveID>
	transmittID = 0 ;
 110:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <transmittID>
	transmittState = 1 ; 
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	UART_voidSetTxComplete_ISR(transmitt_byte);
 11a:	8a e6       	ldi	r24, 0x6A	; 106
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 2c 01 	call	0x258	; 0x258 <UART_voidSetTxComplete_ISR>
	UART_voidSetRxComplete_ISR(receive_byte);
 122:	89 e4       	ldi	r24, 0x49	; 73
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 31 01 	call	0x262	; 0x262 <UART_voidSetRxComplete_ISR>
 12a:	08 95       	ret

0000012c <comm_transmitt_available>:
}

u8 comm_transmitt_available (void )
{
	return transmittState ;
}
 12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 130:	08 95       	ret

00000132 <comm_transmitt_packet>:

void comm_transmitt_packet (u8 *dataPacket)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	u8 i = 0 ;
	transmittState = 0 ;
 138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	while(dataPacket[i]!= '#')
 13c:	98 81       	ld	r25, Y
 13e:	93 32       	cpi	r25, 0x23	; 35
 140:	71 f0       	breq	.+28     	; 0x15e <comm_transmitt_packet+0x2c>
 142:	e0 e0       	ldi	r30, 0x00	; 0
	{
		transmittBuffer[i] = dataPacket[i] ;
 144:	ae 2f       	mov	r26, r30
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	a6 59       	subi	r26, 0x96	; 150
 14a:	bf 4f       	sbci	r27, 0xFF	; 255
 14c:	9c 93       	st	X, r25
		i++ ;
 14e:	ef 5f       	subi	r30, 0xFF	; 255

void comm_transmitt_packet (u8 *dataPacket)
{
	u8 i = 0 ;
	transmittState = 0 ;
	while(dataPacket[i]!= '#')
 150:	de 01       	movw	r26, r28
 152:	ae 0f       	add	r26, r30
 154:	b1 1d       	adc	r27, r1
 156:	9c 91       	ld	r25, X
 158:	93 32       	cpi	r25, 0x23	; 35
 15a:	a1 f7       	brne	.-24     	; 0x144 <comm_transmitt_packet+0x12>
 15c:	01 c0       	rjmp	.+2      	; 0x160 <comm_transmitt_packet+0x2e>
	return transmittState ;
}

void comm_transmitt_packet (u8 *dataPacket)
{
	u8 i = 0 ;
 15e:	e0 e0       	ldi	r30, 0x00	; 0
	while(dataPacket[i]!= '#')
	{
		transmittBuffer[i] = dataPacket[i] ;
		i++ ;
	}
	transmittBuffer[i] = dataPacket[i] ;
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e6 59       	subi	r30, 0x96	; 150
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	83 e2       	ldi	r24, 0x23	; 35
 168:	80 83       	st	Z, r24
	UART_voidSetDataRegister(transmittBuffer[0]) ;
 16a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <transmittBuffer>
 16e:	0e 94 28 01 	call	0x250	; 0x250 <UART_voidSetDataRegister>
	transmittID = 1 ;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <transmittID>
	
	
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <generate_dataPacket>:
    }
}

void generate_dataPacket(void)
{
	data_packet[0]= 'd' ; 
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	84 e6       	ldi	r24, 0x64	; 100
 184:	80 83       	st	Z, r24
	data_packet[1] = temp ; 
 186:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <temp>
 18a:	81 83       	std	Z+1, r24	; 0x01
	data_packet[2] = ldr ;
 18c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <ldr>
 190:	82 83       	std	Z+2, r24	; 0x02
	data_packet[3] = led ;
 192:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <led>
 196:	83 83       	std	Z+3, r24	; 0x03
	data_packet[4] = pir ;
 198:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <pir>
 19c:	84 83       	std	Z+4, r24	; 0x04
	data_packet[5] = door ;
 19e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <door>
 1a2:	85 83       	std	Z+5, r24	; 0x05
	data_packet[6] = fan ;
 1a4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <fan>
 1a8:	86 83       	std	Z+6, r24	; 0x06
	
	data_packet[7] = '#' ;
 1aa:	83 e2       	ldi	r24, 0x23	; 35
 1ac:	87 83       	std	Z+7, r24	; 0x07
	data_packet[8] = 0 ;
 1ae:	10 86       	std	Z+8, r1	; 0x08
 1b0:	08 95       	ret

000001b2 <main>:
void generate_dataPacket(void) ; 

int main(void)
{
    /* Replace with your application code */
	sei() ; 
 1b2:	78 94       	sei
	 initComm() ; 
 1b4:	0e 94 84 00 	call	0x108	; 0x108 <initComm>
	 
	 temp =1 ; led =3 ; fan=7 ; 
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <temp>
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <led>
 1c4:	87 e0       	ldi	r24, 0x07	; 7
 1c6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <fan>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f e9       	ldi	r18, 0x9F	; 159
 1cc:	86 e8       	ldi	r24, 0x86	; 134
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x1e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x28>
 1da:	00 00       	nop
    while (1) 
    {
		_delay_ms(500); 
		temp ++ ; led ++ ; fan++ ; 
 1dc:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <temp>
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <temp>
 1e6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <led>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <led>
 1f0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <fan>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <fan>
		while (comm_transmitt_available())
 1fa:	09 c0       	rjmp	.+18     	; 0x20e <main+0x5c>
		{
			PORTA++ ; 
 1fc:	8b b3       	in	r24, 0x1b	; 27
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	8b bb       	out	0x1b, r24	; 27
			generate_dataPacket() ;
 202:	0e 94 bf 00 	call	0x17e	; 0x17e <generate_dataPacket>
			comm_transmitt_packet(data_packet) ; 
 206:	81 e8       	ldi	r24, 0x81	; 129
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 99 00 	call	0x132	; 0x132 <comm_transmitt_packet>
	 temp =1 ; led =3 ; fan=7 ; 
    while (1) 
    {
		_delay_ms(500); 
		temp ++ ; led ++ ; fan++ ; 
		while (comm_transmitt_available())
 20e:	0e 94 96 00 	call	0x12c	; 0x12c <comm_transmitt_available>
 212:	81 11       	cpse	r24, r1
 214:	f3 cf       	rjmp	.-26     	; 0x1fc <main+0x4a>
 216:	d9 cf       	rjmp	.-78     	; 0x1ca <main+0x18>

00000218 <UART_voidInit>:
void (*RX_COMPLETE_ISR)(void)  = '\0';

void UART_voidInit(void)
{
    /*** Double the transmission speed ***/
    SETBIT(UCSRA, U2X);
 218:	59 9a       	sbi	0x0b, 1	; 11

    /*** Enable Tx and Rx ***/
    SETBIT(UCSRB, RXEN);
 21a:	54 9a       	sbi	0x0a, 4	; 10
    SETBIT(UCSRB, TXEN);
 21c:	53 9a       	sbi	0x0a, 3	; 10

    /*** Enable Tx and Rx Complete Interrupts ***/
    SETBIT(UCSRB, RXCIE);
 21e:	57 9a       	sbi	0x0a, 7	; 10
    SETBIT(UCSRB, TXCIE);
 220:	56 9a       	sbi	0x0a, 6	; 10

    /*** Set 8-bit mode ***/
    CLRBIT(UCSRB, UCSZ2);
 222:	52 98       	cbi	0x0a, 2	; 10

    /*** Select UCSRC Register ***/
    SETBIT(UCSRC, URSEL);
 224:	80 b5       	in	r24, 0x20	; 32
 226:	80 68       	ori	r24, 0x80	; 128
 228:	80 bd       	out	0x20, r24	; 32

    /*** Set 8-bit mode ***/
    SETBIT(UCSRC, UCSZ0);
 22a:	80 b5       	in	r24, 0x20	; 32
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 bd       	out	0x20, r24	; 32
    SETBIT(UCSRC, UCSZ1);
 230:	80 b5       	in	r24, 0x20	; 32
 232:	84 60       	ori	r24, 0x04	; 4
 234:	80 bd       	out	0x20, r24	; 32


    /*** Set Parity mode ***/
    #if (UART_PARITY == NO_PARITY)
        CLRBIT(UCSRC, UPM0);
 236:	80 b5       	in	r24, 0x20	; 32
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	80 bd       	out	0x20, r24	; 32
        CLRBIT(UCSRC, UPM1);
 23c:	80 b5       	in	r24, 0x20	; 32
 23e:	8f 7d       	andi	r24, 0xDF	; 223
 240:	80 bd       	out	0x20, r24	; 32
        SETBIT(UCSRC, UPM1);
    #endif

    /*** Set Stop bit ***/
    #if (UART_STOP_BIT == STOP_BIT_1)
        CLRBIT(UCSRC, USBS);
 242:	80 b5       	in	r24, 0x20	; 32
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	80 bd       	out	0x20, r24	; 32
    /*** Set Baud Rate ***/
    #if (UART_BAUD_RATE == BAUD_RATE_4800)
        UBRRH = 0;
        UBRRL = 25;
    #elif (UART_BAUD_RATE == BAUD_RATE_9600)
        UBRRH = 0;
 248:	10 bc       	out	0x20, r1	; 32
        UBRRL = 12;
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	89 b9       	out	0x09, r24	; 9
 24e:	08 95       	ret

00000250 <UART_voidSetDataRegister>:

}

void UART_voidSetDataRegister(u8 Local_Data)
{
    UDR = Local_Data;
 250:	8c b9       	out	0x0c, r24	; 12
 252:	08 95       	ret

00000254 <UART_u8GetDataRegister>:
}

u8 UART_u8GetDataRegister(void)
{
    return UDR;
 254:	8c b1       	in	r24, 0x0c	; 12
}
 256:	08 95       	ret

00000258 <UART_voidSetTxComplete_ISR>:

void UART_voidSetTxComplete_ISR(void (*Local_ISR)(void))
{
    TX_COMPLETE_ISR = Local_ISR;
 258:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TX_COMPLETE_ISR+0x1>
 25c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TX_COMPLETE_ISR>
 260:	08 95       	ret

00000262 <UART_voidSetRxComplete_ISR>:
}

void UART_voidSetRxComplete_ISR(void (*Local_ISR)(void))
{
    RX_COMPLETE_ISR = Local_ISR;
 262:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <RX_COMPLETE_ISR+0x1>
 266:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <RX_COMPLETE_ISR>
 26a:	08 95       	ret

0000026c <__vector_13>:
}

ISR(USART_TXC_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
    TX_COMPLETE_ISR();
 28e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TX_COMPLETE_ISR>
 292:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TX_COMPLETE_ISR+0x1>
 296:	09 95       	icall
}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_11>:

ISR(USART_RXC_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
    RX_COMPLETE_ISR();
 2dc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <RX_COMPLETE_ISR>
 2e0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <RX_COMPLETE_ISR+0x1>
 2e4:	09 95       	icall
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
