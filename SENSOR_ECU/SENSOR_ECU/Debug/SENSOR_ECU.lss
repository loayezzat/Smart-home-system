
SENSOR_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800062  00800062  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b42  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000861  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  0000185f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00001e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  000024ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  8a:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <receive_byte>:
}



void receive_byte (void) /*This function will be executed if a receive interrupt happens*/
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	receiveBuffer[receiveID] = UART_u8GetDataRegister() ; 
  96:	c0 91 63 00 	lds	r28, 0x0063	; 0x800063 <receiveID>
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	0e 94 25 01 	call	0x24a	; 0x24a <UART_u8GetDataRegister>
  a0:	ce 58       	subi	r28, 0x8E	; 142
  a2:	df 4f       	sbci	r29, 0xFF	; 255
  a4:	88 83       	st	Y, r24
	if (receiveBuffer[receiveID] == EOP)
  a6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <receiveID>
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ee 58       	subi	r30, 0x8E	; 142
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	93 32       	cpi	r25, 0x23	; 35
  b6:	19 f4       	brne	.+6      	; 0xbe <receive_byte+0x2c>
	{
		serveDataPacket () ;	/*serve data packet function*/
		receiveID = 0 ;
  b8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <receiveID>
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <receive_byte+0x32>
	}else {
		receiveID++ ;
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <receiveID>
	}
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <transmitt_byte>:
}


static void transmitt_byte (void) 
{
	if (transmittState == 0 )
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ce:	81 11       	cpse	r24, r1
  d0:	15 c0       	rjmp	.+42     	; 0xfc <transmitt_byte+0x32>
	{
		if (transmittBuffer[transmittID] == EOP ){
  d2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e8 59       	subi	r30, 0x98	; 152
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
  de:	83 32       	cpi	r24, 0x23	; 35
  e0:	31 f4       	brne	.+12     	; 0xee <transmitt_byte+0x24>
			UART_voidSetDataRegister(transmittBuffer[transmittID]) ;
  e2:	0e 94 23 01 	call	0x246	; 0x246 <UART_voidSetDataRegister>
			transmittState = 1 ;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  ec:	08 95       	ret
			}else{
			UART_voidSetDataRegister(transmittBuffer[transmittID]) ;
  ee:	0e 94 23 01 	call	0x246	; 0x246 <UART_voidSetDataRegister>
			transmittID ++ ;
  f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  fc:	08 95       	ret

000000fe <initComm>:
static void serveDataPacket (void ) ;



void initComm(void) {
	UART_voidInit() ; 
  fe:	0e 94 07 01 	call	0x20e	; 0x20e <UART_voidInit>
	receiveID = 0 ;
 102:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <receiveID>
	transmittID = 0 ;
 106:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	transmittState = 1 ; 
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	UART_voidSetTxComplete_ISR(transmitt_byte);
 110:	85 e6       	ldi	r24, 0x65	; 101
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 27 01 	call	0x24e	; 0x24e <UART_voidSetTxComplete_ISR>
	UART_voidSetRxComplete_ISR(receive_byte);
 118:	89 e4       	ldi	r24, 0x49	; 73
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 2c 01 	call	0x258	; 0x258 <UART_voidSetRxComplete_ISR>
 120:	08 95       	ret

00000122 <transmitt_available>:
}

u8 transmitt_available (void )
{
	return transmittState ;
}
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 126:	08 95       	ret

00000128 <transmitt_packet>:

void transmitt_packet (u8 *dataPacket)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
	u8 i = 0 ;
	transmittState = 0 ;
 12e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	while(dataPacket[i]!= '#')
 132:	98 81       	ld	r25, Y
 134:	93 32       	cpi	r25, 0x23	; 35
 136:	71 f0       	breq	.+28     	; 0x154 <transmitt_packet+0x2c>
 138:	e0 e0       	ldi	r30, 0x00	; 0
	{
		transmittBuffer[i] = dataPacket[i] ;
 13a:	ae 2f       	mov	r26, r30
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	a8 59       	subi	r26, 0x98	; 152
 140:	bf 4f       	sbci	r27, 0xFF	; 255
 142:	9c 93       	st	X, r25
		i++ ;
 144:	ef 5f       	subi	r30, 0xFF	; 255

void transmitt_packet (u8 *dataPacket)
{
	u8 i = 0 ;
	transmittState = 0 ;
	while(dataPacket[i]!= '#')
 146:	de 01       	movw	r26, r28
 148:	ae 0f       	add	r26, r30
 14a:	b1 1d       	adc	r27, r1
 14c:	9c 91       	ld	r25, X
 14e:	93 32       	cpi	r25, 0x23	; 35
 150:	a1 f7       	brne	.-24     	; 0x13a <transmitt_packet+0x12>
 152:	01 c0       	rjmp	.+2      	; 0x156 <transmitt_packet+0x2e>
	return transmittState ;
}

void transmitt_packet (u8 *dataPacket)
{
	u8 i = 0 ;
 154:	e0 e0       	ldi	r30, 0x00	; 0
	while(dataPacket[i]!= '#')
	{
		transmittBuffer[i] = dataPacket[i] ;
		i++ ;
	}
	transmittBuffer[i] = dataPacket[i] ;
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e8 59       	subi	r30, 0x98	; 152
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	83 e2       	ldi	r24, 0x23	; 35
 15e:	80 83       	st	Z, r24
	UART_voidSetDataRegister(transmittBuffer[0]) ;
 160:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <transmittBuffer>
 164:	0e 94 23 01 	call	0x246	; 0x246 <UART_voidSetDataRegister>
	transmittID = 1 ;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
	
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <generate_dataPacket>:
    }
}

void generate_dataPacket(void)
{
	data_packet[0]= 'd' ; 
 174:	ef e7       	ldi	r30, 0x7F	; 127
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	84 e6       	ldi	r24, 0x64	; 100
 17a:	80 83       	st	Z, r24
	data_packet[1] = temp ; 
 17c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <temp>
 180:	81 83       	std	Z+1, r24	; 0x01
	data_packet[2] = ldr ;
 182:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <ldr>
 186:	82 83       	std	Z+2, r24	; 0x02
	data_packet[3] = led ;
 188:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <led>
 18c:	83 83       	std	Z+3, r24	; 0x03
	data_packet[4] = pir ;
 18e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <pir>
 192:	84 83       	std	Z+4, r24	; 0x04
	data_packet[5] = door ;
 194:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <door>
 198:	85 83       	std	Z+5, r24	; 0x05
	data_packet[6] = fan ;
 19a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <fan>
 19e:	86 83       	std	Z+6, r24	; 0x06
	
	data_packet[7] = '#' ;
 1a0:	83 e2       	ldi	r24, 0x23	; 35
 1a2:	87 83       	std	Z+7, r24	; 0x07
	data_packet[8] = 0 ;
 1a4:	10 86       	std	Z+8, r1	; 0x08
 1a6:	08 95       	ret

000001a8 <main>:
void generate_dataPacket(void) ; 

int main(void)
{
    /* Replace with your application code */
	sei() ; 
 1a8:	78 94       	sei
	 initComm() ; 
 1aa:	0e 94 7f 00 	call	0xfe	; 0xfe <initComm>
	 
	 temp =1 ; led =3 ; fan=7 ; 
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <temp>
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <led>
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <fan>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f e9       	ldi	r18, 0x9F	; 159
 1c2:	86 e8       	ldi	r24, 0x86	; 134
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x1e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x28>
 1d0:	00 00       	nop
    while (1) 
    {
		_delay_ms(500); 
		temp ++ ; led ++ ; fan++ ; 
 1d2:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <temp>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <temp>
 1dc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <led>
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <led>
 1e6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <fan>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <fan>
		while (transmitt_available())
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <main+0x5c>
		{
			PORTA++ ; 
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	8b bb       	out	0x1b, r24	; 27
			generate_dataPacket() ;
 1f8:	0e 94 ba 00 	call	0x174	; 0x174 <generate_dataPacket>
			transmitt_packet(data_packet) ; 
 1fc:	8f e7       	ldi	r24, 0x7F	; 127
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 94 00 	call	0x128	; 0x128 <transmitt_packet>
	 temp =1 ; led =3 ; fan=7 ; 
    while (1) 
    {
		_delay_ms(500); 
		temp ++ ; led ++ ; fan++ ; 
		while (transmitt_available())
 204:	0e 94 91 00 	call	0x122	; 0x122 <transmitt_available>
 208:	81 11       	cpse	r24, r1
 20a:	f3 cf       	rjmp	.-26     	; 0x1f2 <main+0x4a>
 20c:	d9 cf       	rjmp	.-78     	; 0x1c0 <main+0x18>

0000020e <UART_voidInit>:
 20e:	59 9a       	sbi	0x0b, 1	; 11
 210:	54 9a       	sbi	0x0a, 4	; 10
 212:	53 9a       	sbi	0x0a, 3	; 10
 214:	57 9a       	sbi	0x0a, 7	; 10
 216:	56 9a       	sbi	0x0a, 6	; 10
 218:	52 98       	cbi	0x0a, 2	; 10
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	80 bd       	out	0x20, r24	; 32
 220:	80 b5       	in	r24, 0x20	; 32
 222:	82 60       	ori	r24, 0x02	; 2
 224:	80 bd       	out	0x20, r24	; 32
 226:	80 b5       	in	r24, 0x20	; 32
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	80 bd       	out	0x20, r24	; 32
 22c:	80 b5       	in	r24, 0x20	; 32
 22e:	8f 7e       	andi	r24, 0xEF	; 239
 230:	80 bd       	out	0x20, r24	; 32
 232:	80 b5       	in	r24, 0x20	; 32
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	80 bd       	out	0x20, r24	; 32
 238:	80 b5       	in	r24, 0x20	; 32
 23a:	87 7f       	andi	r24, 0xF7	; 247
 23c:	80 bd       	out	0x20, r24	; 32
 23e:	10 bc       	out	0x20, r1	; 32
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	89 b9       	out	0x09, r24	; 9
 244:	08 95       	ret

00000246 <UART_voidSetDataRegister>:
 246:	8c b9       	out	0x0c, r24	; 12
 248:	08 95       	ret

0000024a <UART_u8GetDataRegister>:
 24a:	8c b1       	in	r24, 0x0c	; 12
 24c:	08 95       	ret

0000024e <UART_voidSetTxComplete_ISR>:
 24e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <TX_COMPLETE_ISR+0x1>
 252:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <TX_COMPLETE_ISR>
 256:	08 95       	ret

00000258 <UART_voidSetRxComplete_ISR>:
 258:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <RX_COMPLETE_ISR+0x1>
 25c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RX_COMPLETE_ISR>
 260:	08 95       	ret

00000262 <__vector_13>:
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
 284:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TX_COMPLETE_ISR>
 288:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TX_COMPLETE_ISR+0x1>
 28c:	09 95       	icall
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_11>:
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
 2d2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <RX_COMPLETE_ISR>
 2d6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <RX_COMPLETE_ISR+0x1>
 2da:	09 95       	icall
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
