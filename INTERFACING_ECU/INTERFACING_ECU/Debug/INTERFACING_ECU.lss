
INTERFACING_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000f6  008000f6  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001500  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac2  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9a  00000000  00000000  000028c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  0000345c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000601  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0b  00000000  00000000  00003c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	6c 01       	movw	r12, r24
  56:	4c 01       	movw	r8, r24
  58:	4e 01       	movw	r8, r28
  5a:	50 01       	movw	r10, r0
  5c:	52 01       	movw	r10, r4
  5e:	54 01       	movw	r10, r8
  60:	56 01       	movw	r10, r12
  62:	58 01       	movw	r10, r16
  64:	5a 01       	movw	r10, r20
  66:	5c 01       	movw	r10, r24
  68:	5e 01       	movw	r10, r28
  6a:	60 01       	movw	r12, r0
  6c:	62 01       	movw	r12, r4
  6e:	64 01       	movw	r12, r8
  70:	66 01       	movw	r12, r12
  72:	68 01       	movw	r12, r16

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e0 e5       	ldi	r30, 0x50	; 80
  88:	f6 e0       	ldi	r31, 0x06	; 6
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a6 3f       	cpi	r26, 0xF6	; 246
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a6 ef       	ldi	r26, 0xF6	; 246
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a3 30       	cpi	r26, 0x03	; 3
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  aa:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <DIO_voidInit>:
		{
			ret = DIO_LOW;
		}
	}
	return ret;
}
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	84 bb       	out	0x14, r24	; 20
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	08 95       	ret

000000be <DIO_voidSetPin>:
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	e8 f4       	brcc	.+58     	; 0xfc <DIO_voidSetPin+0x3e>
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	69 f4       	brne	.+26     	; 0xe0 <DIO_voidSetPin+0x22>
  c6:	4b b3       	in	r20, 0x1b	; 27
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPin+0x16>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPin+0x12>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
  e0:	4b b3       	in	r20, 0x1b	; 27
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_voidSetPin+0x30>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_voidSetPin+0x2c>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	08 95       	ret
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	f8 f4       	brcc	.+62     	; 0x13e <DIO_voidSetPin+0x80>
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	71 f4       	brne	.+28     	; 0x120 <DIO_voidSetPin+0x62>
 104:	48 b3       	in	r20, 0x18	; 24
 106:	88 50       	subi	r24, 0x08	; 8
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPin+0x56>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPin+0x52>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 95       	ret
 120:	48 b3       	in	r20, 0x18	; 24
 122:	88 50       	subi	r24, 0x08	; 8
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_voidSetPin+0x72>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_voidSetPin+0x6e>
 134:	cb 01       	movw	r24, r22
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret
 13e:	88 31       	cpi	r24, 0x18	; 24
 140:	f8 f4       	brcc	.+62     	; 0x180 <DIO_voidSetPin+0xc2>
 142:	61 30       	cpi	r22, 0x01	; 1
 144:	71 f4       	brne	.+28     	; 0x162 <DIO_voidSetPin+0xa4>
 146:	45 b3       	in	r20, 0x15	; 21
 148:	80 51       	subi	r24, 0x10	; 16
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPin+0x98>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPin+0x94>
 15a:	cb 01       	movw	r24, r22
 15c:	84 2b       	or	r24, r20
 15e:	85 bb       	out	0x15, r24	; 21
 160:	08 95       	ret
 162:	45 b3       	in	r20, 0x15	; 21
 164:	80 51       	subi	r24, 0x10	; 16
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPin+0xb4>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPin+0xb0>
 176:	cb 01       	movw	r24, r22
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	08 95       	ret
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	f0 f4       	brcc	.+60     	; 0x1c0 <DIO_voidSetPin+0x102>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 f4       	brne	.+28     	; 0x1a4 <DIO_voidSetPin+0xe6>
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	88 51       	subi	r24, 0x18	; 24
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPin+0xda>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPin+0xd6>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret
 1a4:	42 b3       	in	r20, 0x12	; 18
 1a6:	88 51       	subi	r24, 0x18	; 24
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_voidSetPin+0xf6>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_voidSetPin+0xf2>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	08 95       	ret

000001c2 <DIO_voidSetPort>:
 1c2:	81 11       	cpse	r24, r1
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPort+0x8>
 1c6:	6b bb       	out	0x1b, r22	; 27
 1c8:	08 95       	ret
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <DIO_voidSetPort+0x10>
 1ce:	68 bb       	out	0x18, r22	; 24
 1d0:	08 95       	ret
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	11 f4       	brne	.+4      	; 0x1da <DIO_voidSetPort+0x18>
 1d6:	65 bb       	out	0x15, r22	; 21
 1d8:	08 95       	ret
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_voidSetPort+0x1e>
 1de:	62 bb       	out	0x12, r22	; 18
 1e0:	08 95       	ret

000001e2 <DIO_voidSetPortDir>:
 1e2:	81 11       	cpse	r24, r1
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPortDir+0x8>
 1e6:	6a bb       	out	0x1a, r22	; 26
 1e8:	08 95       	ret
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <DIO_voidSetPortDir+0x10>
 1ee:	67 bb       	out	0x17, r22	; 23
 1f0:	08 95       	ret
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	11 f4       	brne	.+4      	; 0x1fa <DIO_voidSetPortDir+0x18>
 1f6:	64 bb       	out	0x14, r22	; 20
 1f8:	08 95       	ret
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	09 f4       	brne	.+2      	; 0x200 <DIO_voidSetPortDir+0x1e>
 1fe:	61 bb       	out	0x11, r22	; 17
 200:	08 95       	ret

00000202 <DIO_u8GetPinInPort>:

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;

    if(Local_PortNumber == 0)
 202:	81 11       	cpse	r24, r1
 204:	09 c0       	rjmp	.+18     	; 0x218 <DIO_u8GetPinInPort+0x16>
	{
	    ret = GETBIT(PINA, Local_PinNumber);
 206:	89 b3       	in	r24, 0x19	; 25
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8GetPinInPort+0xe>
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8GetPinInPort+0xa>
 214:	81 70       	andi	r24, 0x01	; 1
 216:	08 95       	ret

    }else if(Local_PortNumber == 1)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	49 f4       	brne	.+18     	; 0x22e <DIO_u8GetPinInPort+0x2c>
    {
	    ret = GETBIT(PINB, Local_PinNumber);
 21c:	86 b3       	in	r24, 0x16	; 22
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_u8GetPinInPort+0x24>
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_u8GetPinInPort+0x20>
 22a:	81 70       	andi	r24, 0x01	; 1
 22c:	08 95       	ret

    }else if(Local_PortNumber == 2)
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	49 f4       	brne	.+18     	; 0x244 <DIO_u8GetPinInPort+0x42>
    {
	    ret = GETBIT(PINC, Local_PinNumber);
 232:	83 b3       	in	r24, 0x13	; 19
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_u8GetPinInPort+0x3a>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_u8GetPinInPort+0x36>
 240:	81 70       	andi	r24, 0x01	; 1
 242:	08 95       	ret

    }else if(Local_PortNumber == 3)
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	49 f4       	brne	.+18     	; 0x25a <DIO_u8GetPinInPort+0x58>
    {
	    ret = GETBIT(PIND, Local_PinNumber);
 248:	80 b3       	in	r24, 0x10	; 16
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_u8GetPinInPort+0x50>
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_u8GetPinInPort+0x4c>
 256:	81 70       	andi	r24, 0x01	; 1
 258:	08 95       	ret
	return ret;
}

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;
 25a:	80 e0       	ldi	r24, 0x00	; 0
	    ret = GETBIT(PIND, Local_PinNumber);
    }

    return ret;

}
 25c:	08 95       	ret

0000025e <main>:
#include "DIO_int.h" 
#include "LCD_int.h"
int main(){
	
	u8 value ; 
	DIO_voidInit() ;
 25e:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_voidInit>
	LCD_voidInit () ;
 262:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidInit>

	/*LCD_voidDisplayString("Welcome"); 
	_delay_ms(1000);
	LCD_voidClearScreen();*/
	
	system_init () ; /*initiating the system state */
 266:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <system_init>

	while(1)
	{
	value = KeyPad_u8GetPressedKey() ;
 26a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <KeyPad_u8GetPressedKey>
	if (value != 255) system_manage(value) ; /*If key is pressed*/
 26e:	8f 3f       	cpi	r24, 0xFF	; 255
 270:	11 f0       	breq	.+4      	; 0x276 <main+0x18>
 272:	0e 94 7d 02 	call	0x4fa	; 0x4fa <system_manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	8f e4       	ldi	r24, 0x4F	; 79
 278:	93 ec       	ldi	r25, 0xC3	; 195
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x1c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x22>
 280:	00 00       	nop
 282:	f3 cf       	rjmp	.-26     	; 0x26a <main+0xc>

00000284 <KeyPad_u8AdjustKeyNumber_4x4>:

}

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	e0 31       	cpi	r30, 0x10	; 16
 28c:	f1 05       	cpc	r31, r1
 28e:	10 f5       	brcc	.+68     	; 0x2d4 <KeyPad_u8AdjustKeyNumber_4x4+0x50>
 290:	e6 5d       	subi	r30, 0xD6	; 214
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	0c 94 20 03 	jmp	0x640	; 0x640 <__tablejump2__>
	{
		case 1: return '7';
				break;
		case 2: return '8';
 298:	88 e3       	ldi	r24, 0x38	; 56
 29a:	08 95       	ret
				break;
		case 3: return '9';
 29c:	89 e3       	ldi	r24, 0x39	; 57
 29e:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	08 95       	ret
				break;
		case 5: return '4';
 2a4:	84 e3       	ldi	r24, 0x34	; 52
 2a6:	08 95       	ret
				break;
		case 6: return '5';
 2a8:	85 e3       	ldi	r24, 0x35	; 53
 2aa:	08 95       	ret
				break;
		case 7: return '6';
 2ac:	86 e3       	ldi	r24, 0x36	; 54
 2ae:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 2b0:	8a e2       	ldi	r24, 0x2A	; 42
 2b2:	08 95       	ret
				break;
		case 9: return '1';
 2b4:	81 e3       	ldi	r24, 0x31	; 49
 2b6:	08 95       	ret
				break;
		case 10: return '2';
 2b8:	82 e3       	ldi	r24, 0x32	; 50
 2ba:	08 95       	ret
				break;
		case 11: return '3';
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 2c0:	8d e2       	ldi	r24, 0x2D	; 45
 2c2:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	08 95       	ret
				break;
		case 14: return '0';
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
 2cc:	8d e3       	ldi	r24, 0x3D	; 61
 2ce:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 2d0:	8b e2       	ldi	r24, 0x2B	; 43
 2d2:	08 95       	ret
				break;
		default: return NO_KEY_PRESSED;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	08 95       	ret

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
	{
		case 1: return '7';
 2d8:	87 e3       	ldi	r24, 0x37	; 55
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return NO_KEY_PRESSED;
	}

}
 2da:	08 95       	ret

000002dc <KeyPad_u8GetPressedKey>:
#include "KeyPad_priv.h"
#include "KeyPad_config.h"
#include "KeyPad_int.h"

u8 KeyPad_u8GetPressedKey(void)
{
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	00 e0       	ldi	r16, 0x00	; 0
 2ee:	10 e0       	ldi	r17, 0x00	; 0
        /*
         * Each time only one of the column pins will be output and
         * the rest will be input pins including the row pins
         */

        DIO_voidSetPortDir(KEYPAD_PORT, (0b00010000<<col));
 2f0:	68 94       	set
 2f2:	cc 24       	eor	r12, r12
 2f4:	c4 f8       	bld	r12, 4
 2f6:	d1 2c       	mov	r13, r1
 2f8:	e0 2e       	mov	r14, r16
 2fa:	e6 01       	movw	r28, r12
 2fc:	00 2e       	mov	r0, r16
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <KeyPad_u8GetPressedKey+0x28>
 300:	cc 0f       	add	r28, r28
 302:	dd 1f       	adc	r29, r29
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <KeyPad_u8GetPressedKey+0x24>
 308:	be 01       	movw	r22, r28
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_voidSetPortDir>

        /*
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));
 312:	6c 2f       	mov	r22, r28
 314:	60 95       	com	r22
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidSetPort>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	fc 2e       	mov	r15, r28

        for(row=0; row<N_row; row++) /* loop for rows */
        {
            if(DIO_u8GetPinInPort(KEYPAD_PORT, row) == 0) /* if the switch is pressed in this row */
 322:	be 01       	movw	r22, r28
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 01 01 	call	0x202	; 0x202 <DIO_u8GetPinInPort>
 32c:	89 2b       	or	r24, r25
 32e:	41 f4       	brne	.+16     	; 0x340 <KeyPad_u8GetPressedKey+0x64>
            {
                #if (N_col == 3)
                    return KeyPad_u8AdjustKeyNumber_4x3((row*N_col)+col+1);
                #elif (N_col == 4)
                    return KeyPad_u8AdjustKeyNumber_4x4((row*N_col)+col+1);
 330:	ff 0c       	add	r15, r15
 332:	ff 0c       	add	r15, r15
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	8e 0d       	add	r24, r14
 338:	8f 0d       	add	r24, r15
 33a:	0e 94 42 01 	call	0x284	; 0x284 <KeyPad_u8AdjustKeyNumber_4x4>
 33e:	0a c0       	rjmp	.+20     	; 0x354 <KeyPad_u8GetPressedKey+0x78>
 340:	21 96       	adiw	r28, 0x01	; 1
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));

        for(row=0; row<N_row; row++) /* loop for rows */
 342:	c4 30       	cpi	r28, 0x04	; 4
 344:	d1 05       	cpc	r29, r1
 346:	61 f7       	brne	.-40     	; 0x320 <KeyPad_u8GetPressedKey+0x44>
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255

u8 KeyPad_u8GetPressedKey(void)
{
    u8 col,row;

    for(col=0; col<N_col; col++) /* loop for columns */
 34c:	04 30       	cpi	r16, 0x04	; 4
 34e:	11 05       	cpc	r17, r1
 350:	99 f6       	brne	.-90     	; 0x2f8 <KeyPad_u8GetPressedKey+0x1c>
                #endif
            }
        }
    }

    return NO_KEY_PRESSED;
 352:	8f ef       	ldi	r24, 0xFF	; 255
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	08 95       	ret

00000366 <LCD_voidSendCommand>:
	LCD_voidSendCommand(CURSOR_OFF);                     /* cursor off */
	LCD_voidSendCommand(CLEAR_COMMAND);                  /* Clear LCD at the beginning */
}

void LCD_voidSendCommand(u8 command)
{
 366:	cf 93       	push	r28
 368:	c8 2f       	mov	r28, r24
    DIO_voidSetPin(LCD_RS, DIO_LOW);     /* Instruction register selected, LCD_RS=0 */
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW, DIO_LOW); /* Write data to LCD, LCD_RW=0 */
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	89 e0       	ldi	r24, 0x09	; 9
 376:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 37a:	89 ef       	ldi	r24, 0xF9	; 249
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_voidSendCommand+0x18>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_voidSendCommand+0x1e>
 384:	00 00       	nop
	_delay_ms(1);

	DIO_voidSetPin(LCD_EN, DIO_HIGH);    /* Enable LCD, LCD_EN=1 */
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 38e:	89 ef       	ldi	r24, 0xF9	; 249
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCD_voidSendCommand+0x2c>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_voidSendCommand+0x32>
 398:	00 00       	nop

        DIO_voidSetPin(LCD_EN, DIO_LOW); /* Disable LCD, LCD_EN=0 */
		_delay_ms(1);

	#elif (DATA_BITS_MODE == 8)
        DIO_voidSetPort(LCD_DATA_PORT, command);
 39a:	6c 2f       	mov	r22, r28
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidSetPort>
 3a2:	89 ef       	ldi	r24, 0xF9	; 249
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_voidSendCommand+0x40>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <LCD_voidSendCommand+0x46>
 3ac:	00 00       	nop
		_delay_ms(1);
		DIO_voidSetPin(LCD_EN, DIO_LOW); /* Disable LCD, LCD_EN=0 */
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 3b6:	89 ef       	ldi	r24, 0xF9	; 249
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_voidSendCommand+0x54>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_voidSendCommand+0x5a>
 3c0:	00 00       	nop
		_delay_ms(1);
	#endif

}
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_int.h"

void LCD_voidInit(void)
{
    DIO_voidInit();
 3c6:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_voidInit>

    LCD_voidSendCommand(RETURN_CURSOR_TO_HOME);             /* Returns the cursor to the home position (Address 0). */
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidSendCommand>
	#if (DATA_BITS_MODE == 4)
		LCD_voidSendCommand(TWO_LINE_LCD_Four_BIT_MODE);  /* 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* 2-line LCD + 8-bit Data Mode + 5*7 dot display Mode */
 3d0:	88 e3       	ldi	r24, 0x38	; 56
 3d2:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidSendCommand>
	#endif

	LCD_voidSendCommand(CURSOR_OFF);                     /* cursor off */
 3d6:	8c e0       	ldi	r24, 0x0C	; 12
 3d8:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidSendCommand>
	LCD_voidSendCommand(CLEAR_COMMAND);                  /* Clear LCD at the beginning */
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidSendCommand>
 3e2:	08 95       	ret

000003e4 <LCD_voidDisplayCharacter>:
	#endif

}

void LCD_voidDisplayCharacter(u8 data)
{
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
    DIO_voidSetPin(LCD_RS, DIO_HIGH);     /* Data register selected, LCD_RS=1 */
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	8a e0       	ldi	r24, 0x0A	; 10
 3ec:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW, DIO_LOW); /* Write data to LCD, LCD_RW=0 */
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	89 e0       	ldi	r24, 0x09	; 9
 3f4:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 3f8:	89 ef       	ldi	r24, 0xF9	; 249
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_voidDisplayCharacter+0x18>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
	_delay_ms(1);

	DIO_voidSetPin(LCD_EN, DIO_HIGH);    /* Enable LCD, LCD_EN=1 */
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 40c:	89 ef       	ldi	r24, 0xF9	; 249
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop

        DIO_voidSetPin(LCD_EN, DIO_LOW); /* Disable LCD, LCD_EN=0 */
		_delay_ms(1);

	#elif (DATA_BITS_MODE == 8)
        DIO_voidSetPort(LCD_DATA_PORT, data);
 418:	6c 2f       	mov	r22, r28
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidSetPort>
 420:	89 ef       	ldi	r24, 0xF9	; 249
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
		_delay_ms(1);
		DIO_voidSetPin(LCD_EN, DIO_LOW); /* Disable LCD, LCD_EN=0 */
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 434:	89 ef       	ldi	r24, 0xF9	; 249
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
		_delay_ms(1);
	#endif
}
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <LCD_voidDisplayString>:

void LCD_voidDisplayString(const u8 *Str)
{
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	fc 01       	movw	r30, r24
	u8 i = 0;
	while(Str[i] != '\0')
 44c:	80 81       	ld	r24, Z
 44e:	88 23       	and	r24, r24
 450:	59 f0       	breq	.+22     	; 0x468 <__stack+0x9>
 452:	8f 01       	movw	r16, r30
 454:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidDisplayCharacter(Str[i]);
 456:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_voidDisplayCharacter>
		i++;
 45a:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_voidDisplayString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
 45c:	f8 01       	movw	r30, r16
 45e:	ec 0f       	add	r30, r28
 460:	f1 1d       	adc	r31, r1
 462:	80 81       	ld	r24, Z
 464:	81 11       	cpse	r24, r1
 466:	f7 cf       	rjmp	.-18     	; 0x456 <LCD_voidDisplayString+0x12>
	{
		LCD_voidDisplayCharacter(Str[i]);
		i++;
	}
}
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <LCD_voidClearScreen>:

void LCD_voidClearScreen(void)
{
    LCD_voidSendCommand(CLEAR_COMMAND);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidSendCommand>
 476:	08 95       	ret

00000478 <LCD_voidGoToRowColumn>:
void LCD_voidGoToRowColumn(u8 row,u8 col)
{
    u8 Address;

	/* first of all calculate the required address */
	switch(row)
 478:	88 23       	and	r24, r24
 47a:	19 f0       	breq	.+6      	; 0x482 <LCD_voidGoToRowColumn+0xa>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	19 f0       	breq	.+6      	; 0x486 <LCD_voidGoToRowColumn+0xe>
 480:	04 c0       	rjmp	.+8      	; 0x48a <LCD_voidGoToRowColumn+0x12>
	{
		case 0:
				Address=col;
 482:	96 2f       	mov	r25, r22
 484:	02 c0       	rjmp	.+4      	; 0x48a <LCD_voidGoToRowColumn+0x12>
				break;
		case 1:
				Address=col+0x40;
 486:	90 e4       	ldi	r25, 0x40	; 64
 488:	96 0f       	add	r25, r22
				break;

	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_voidSendCommand(Address | SET_CURSOR_LOCATION);
 48a:	89 2f       	mov	r24, r25
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidSendCommand>
 492:	08 95       	ret

00000494 <system_init_loginState>:
}

static void system_init_loginState (void)
{
	
	  LCD_voidClearScreen();
 494:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
	  LCD_voidDisplayString("Enter Pass try:");
 498:	80 e6       	ldi	r24, 0x60	; 96
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
	  LCD_voidDisplayCharacter(pass_tries + '1') ; 
 4a0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 4a4:	8f 5c       	subi	r24, 0xCF	; 207
 4a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_voidDisplayCharacter>
	  LCD_voidGoToRowColumn(1,0) ;
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_voidGoToRowColumn>
	  pw_id = 0 ;
 4b2:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <pw_id>
 4b6:	08 95       	ret

000004b8 <system_init>:
//static void wrong_password_alarm (void) ;
//static void system_settings_init (void) ;

void system_init (void ) 
{
	system_state = STATE_INIT ; 
 4b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <system_state>
	LCD_voidClearScreen();		/*Go to the beginning of the first line */
 4bc:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
	LCD_voidDisplayString("1:Temp");
 4c0:	80 e7       	ldi	r24, 0x70	; 112
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
	LCD_voidGoToRowColumn(0,8) ;/*Go to the middle of the first line */
 4c8:	68 e0       	ldi	r22, 0x08	; 8
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_voidGoToRowColumn>
	LCD_voidDisplayString("2:Pump");
 4d0:	87 e7       	ldi	r24, 0x77	; 119
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
	LCD_voidGoToRowColumn(1,0) ;/*Go to the beginning of the second line */
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_voidGoToRowColumn>
	LCD_voidDisplayString("3:Tank");
 4e0:	8e e7       	ldi	r24, 0x7E	; 126
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
	LCD_voidGoToRowColumn(1,8) ;/*Go to the middle of the second line */
 4e8:	68 e0       	ldi	r22, 0x08	; 8
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_voidGoToRowColumn>
	LCD_voidDisplayString("4:config");
 4f0:	85 e8       	ldi	r24, 0x85	; 133
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 4f8:	08 95       	ret

000004fa <system_manage>:
}

void system_manage (u8 key_value) 
{
	/*system reset(by on/c key)*/
	if ( key_value == 13)
 4fa:	8d 30       	cpi	r24, 0x0D	; 13
 4fc:	19 f4       	brne	.+6      	; 0x504 <system_manage+0xa>
	{
		system_init() ;
 4fe:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <system_init>
 502:	08 95       	ret
	}else
	{

		if (system_state == STATE_INIT)		// managing main(initial) frame
 504:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <system_state>
 508:	91 11       	cpse	r25, r1
 50a:	2c c0       	rjmp	.+88     	; 0x564 <system_manage+0x6a>
		{
			if (key_value == '1'  || key_value == '2' ||  key_value == '3')
 50c:	9f ec       	ldi	r25, 0xCF	; 207
 50e:	98 0f       	add	r25, r24
 510:	93 30       	cpi	r25, 0x03	; 3
 512:	f8 f4       	brcc	.+62     	; 0x552 <system_manage+0x58>
			{
				system_state = STATE_SHOW_DATA ; 
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <system_state>
}



static void system_show_data (u8 key_v) {
	switch (key_v){
 51a:	82 33       	cpi	r24, 0x32	; 50
 51c:	61 f0       	breq	.+24     	; 0x536 <system_manage+0x3c>
 51e:	83 33       	cpi	r24, 0x33	; 51
 520:	89 f0       	breq	.+34     	; 0x544 <system_manage+0x4a>
 522:	81 33       	cpi	r24, 0x31	; 49
 524:	09 f0       	breq	.+2      	; 0x528 <system_manage+0x2e>
 526:	8b c0       	rjmp	.+278    	; 0x63e <system_manage+0x144>
		case  '1' : LCD_voidClearScreen() ; 
 528:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
					LCD_voidDisplayString("showing temp");
 52c:	8e e8       	ldi	r24, 0x8E	; 142
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 534:	08 95       	ret
					break ;
		case  '2' : LCD_voidClearScreen() ;
 536:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
					LCD_voidDisplayString("showing pump");
 53a:	8b e9       	ldi	r24, 0x9B	; 155
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 542:	08 95       	ret
					break ;
		case  '3' : LCD_voidClearScreen() ;
 544:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
					LCD_voidDisplayString("showing tank");
 548:	88 ea       	ldi	r24, 0xA8	; 168
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 550:	08 95       	ret
			if (key_value == '1'  || key_value == '2' ||  key_value == '3')
			{
				system_state = STATE_SHOW_DATA ; 
				system_show_data (key_value) ;

			}else if (key_value == '4')
 552:	84 33       	cpi	r24, 0x34	; 52
 554:	09 f0       	breq	.+2      	; 0x558 <system_manage+0x5e>
 556:	73 c0       	rjmp	.+230    	; 0x63e <system_manage+0x144>
			{
				system_state = STATE_LOGIN ;
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <system_state>
				
				system_init_loginState () ;		
 55e:	0e 94 4a 02 	call	0x494	; 0x494 <system_init_loginState>
 562:	08 95       	ret
			}
		
		}
		else if (system_state == STATE_LOGIN) // managing the logging frame
 564:	94 30       	cpi	r25, 0x04	; 4
 566:	09 f0       	breq	.+2      	; 0x56a <system_manage+0x70>
 568:	6a c0       	rjmp	.+212    	; 0x63e <system_manage+0x144>
		{
			if (key_value != '=')
 56a:	8d 33       	cpi	r24, 0x3D	; 61
 56c:	69 f0       	breq	.+26     	; 0x588 <system_manage+0x8e>
			{
				entered_password[pw_id] = key_value ; /*concatenating the char in the password string*/
 56e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <pw_id>
 572:	e9 2f       	mov	r30, r25
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	e8 50       	subi	r30, 0x08	; 8
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	80 83       	st	Z, r24
				pw_id++ ;/*incrementing the string index for next char assignment*/
 57c:	9f 5f       	subi	r25, 0xFF	; 255
 57e:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <pw_id>
				LCD_voidDisplayCharacter(key_value);
 582:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_voidDisplayCharacter>
 586:	08 95       	ret
			
			}else if (key_value == '=')/*the user ends the password */
			{
				 
				entered_password[pw_id] = 0 ;  /*terminating the password string*/
 588:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <pw_id>
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	e8 50       	subi	r30, 0x08	; 8
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	10 82       	st	Z, r1
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
	{
		if (system_password[i] != entered_password[i]) {
 594:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <entered_password>
 598:	81 33       	cpi	r24, 0x31	; 49
 59a:	49 f4       	brne	.+18     	; 0x5ae <system_manage+0xb4>
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	15 c0       	rjmp	.+42     	; 0x5ca <system_manage+0xd0>
 5a0:	fc 01       	movw	r30, r24
 5a2:	e8 50       	subi	r30, 0x08	; 8
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	40 81       	ld	r20, Z
 5a8:	43 17       	cp	r20, r19
 5aa:	79 f0       	breq	.+30     	; 0x5ca <system_manage+0xd0>
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <system_manage+0xb8>
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
 5b2:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__data_end>
 5b6:	2f 5f       	subi	r18, 0xFF	; 255
 5b8:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__data_end>
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 5bc:	fc 01       	movw	r30, r24
 5be:	e8 50       	subi	r30, 0x08	; 8
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	80 81       	ld	r24, Z
 5c4:	88 23       	and	r24, r24
 5c6:	81 f0       	breq	.+32     	; 0x5e8 <system_manage+0xee>
 5c8:	0a c0       	rjmp	.+20     	; 0x5de <system_manage+0xe4>
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
			break ;
		}
		i++ ;
 5ca:	2f 5f       	subi	r18, 0xFF	; 255
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 5cc:	82 2f       	mov	r24, r18
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	e5 51       	subi	r30, 0x15	; 21
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	30 81       	ld	r19, Z
 5d8:	31 11       	cpse	r19, r1
 5da:	e2 cf       	rjmp	.-60     	; 0x5a0 <system_manage+0xa6>
 5dc:	29 c0       	rjmp	.+82     	; 0x630 <system_manage+0x136>
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
	{
		pass_validity = 0 ; 
		pass_tries ++ ;
 5de:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 5e2:	8f 5f       	subi	r24, 0xFF	; 255
 5e4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
		system_settings_init() ;*/
		LCD_voidClearScreen();
		LCD_voidDisplayString("Login successful"); 
	}else
	{
		if (pass_tries >= 3 )
 5e8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 5ec:	83 30       	cpi	r24, 0x03	; 3
 5ee:	38 f0       	brcs	.+14     	; 0x5fe <system_manage+0x104>
		{
			
			//wrong_password_alarm () ;
			LCD_voidClearScreen();
 5f0:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
			LCD_voidDisplayString("wrong pass alarm on");
 5f4:	85 eb       	ldi	r24, 0xB5	; 181
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 5fc:	08 95       	ret
		}else 
		{
			LCD_voidClearScreen();
 5fe:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
			LCD_voidDisplayString("give another try");
 602:	89 ec       	ldi	r24, 0xC9	; 201
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 60a:	2f e3       	ldi	r18, 0x3F	; 63
 60c:	8d e0       	ldi	r24, 0x0D	; 13
 60e:	93 e0       	ldi	r25, 0x03	; 3
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <system_manage+0x116>
 618:	00 c0       	rjmp	.+0      	; 0x61a <system_manage+0x120>
 61a:	00 00       	nop
			_delay_ms(1000) ; 
			system_init_loginState() ; /*give another try*/
 61c:	0e 94 4a 02 	call	0x494	; 0x494 <system_init_loginState>
			/*Requires no more user interaction unless the reset to main frame which is already checked */
		}
		
	
	}
}
 620:	08 95       	ret
	
	
	if (pass_validity == 1 ) {
		/*system_state = STATE_SETTINGS ; 
		system_settings_init() ;*/
		LCD_voidClearScreen();
 622:	0e 94 38 02 	call	0x470	; 0x470 <LCD_voidClearScreen>
		LCD_voidDisplayString("Login successful"); 
 626:	8a ed       	ldi	r24, 0xDA	; 218
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 22 02 	call	0x444	; 0x444 <LCD_voidDisplayString>
 62e:	08 95       	ret
			pass_tries ++ ;
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 630:	fc 01       	movw	r30, r24
 632:	e8 50       	subi	r30, 0x08	; 8
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	80 81       	ld	r24, Z
 638:	81 11       	cpse	r24, r1
 63a:	d1 cf       	rjmp	.-94     	; 0x5de <system_manage+0xe4>
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <system_manage+0x128>
 63e:	08 95       	ret

00000640 <__tablejump2__>:
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	05 90       	lpm	r0, Z+
 646:	f4 91       	lpm	r31, Z
 648:	e0 2d       	mov	r30, r0
 64a:	09 94       	ijmp

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
