
INTERFACING_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800130  00800130  00000ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb9  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d38  00000000  00000000  0000297d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001024  00000000  00000000  000036b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  000046dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000858  00000000  00000000  00004ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121c  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	bd 01       	movw	r22, r26
  56:	9d 01       	movw	r18, r26
  58:	9f 01       	movw	r18, r30
  5a:	a1 01       	movw	r20, r2
  5c:	a3 01       	movw	r20, r6
  5e:	a5 01       	movw	r20, r10
  60:	a7 01       	movw	r20, r14
  62:	a9 01       	movw	r20, r18
  64:	ab 01       	movw	r20, r22
  66:	ad 01       	movw	r20, r26
  68:	af 01       	movw	r20, r30
  6a:	b1 01       	movw	r22, r2
  6c:	b3 01       	movw	r22, r6
  6e:	b5 01       	movw	r22, r10
  70:	b7 01       	movw	r22, r14
  72:	b9 01       	movw	r22, r18

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ec e3       	ldi	r30, 0x3C	; 60
  88:	fa e0       	ldi	r31, 0x0A	; 10
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 33       	cpi	r26, 0x30	; 48
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e3       	ldi	r26, 0x30	; 48
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a8 35       	cpi	r26, 0x58	; 88
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  aa:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <receive_byte>:
}



void receive_byte (void) /*This function will be executed if a receive interrupt happens*/
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	receiveBuffer[receiveID] = UART_u8GetDataRegister() ; 
  b6:	c0 91 31 01 	lds	r28, 0x0131	; 0x800131 <receiveID>
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <UART_u8GetDataRegister>
  c0:	c2 5b       	subi	r28, 0xB2	; 178
  c2:	de 4f       	sbci	r29, 0xFE	; 254
  c4:	88 83       	st	Y, r24
	if (receiveBuffer[receiveID] == EOP)
  c6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <receiveID>
  ca:	e8 2f       	mov	r30, r24
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	e2 5b       	subi	r30, 0xB2	; 178
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	90 81       	ld	r25, Z
  d4:	93 32       	cpi	r25, 0x23	; 35
  d6:	19 f4       	brne	.+6      	; 0xde <receive_byte+0x2c>
	{
		serveDataPacket () ;	/*serve data packet function*/
		receiveID = 0 ;
  d8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <receiveID>
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <receive_byte+0x32>
	}else {
		receiveID++ ;
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <receiveID>
	}
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <transmitt_byte>:
	
}

static void transmitt_byte (void) 
{
	if (transmittState == 0 )
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ee:	81 11       	cpse	r24, r1
  f0:	15 c0       	rjmp	.+42     	; 0x11c <transmitt_byte+0x32>
	{
		if (transmittBuffer[transmittID] == EOP ){
  f2:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end>
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 5b       	subi	r30, 0xBC	; 188
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	80 81       	ld	r24, Z
  fe:	83 32       	cpi	r24, 0x23	; 35
 100:	31 f4       	brne	.+12     	; 0x10e <transmitt_byte+0x24>
			UART_voidSetDataRegister(transmittBuffer[transmittID]) ;
 102:	0e 94 79 04 	call	0x8f2	; 0x8f2 <UART_voidSetDataRegister>
			transmittState = 1 ;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 10c:	08 95       	ret
			}else{
			UART_voidSetDataRegister(transmittBuffer[transmittID]) ;
 10e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <UART_voidSetDataRegister>
			transmittID ++ ;
 112:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 11c:	08 95       	ret

0000011e <initComm>:



void initComm(void) {
	
	UART_voidInit() ; 
 11e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_voidInit>
	receiveID = 0 ;
 122:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <receiveID>
	transmittID = 0 ;
 126:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
	transmittState = 1 ; 
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	UART_voidSetTxComplete_ISR(transmitt_byte);
 130:	85 e7       	ldi	r24, 0x75	; 117
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_voidSetTxComplete_ISR>
	UART_voidSetRxComplete_ISR(receive_byte);
 138:	89 e5       	ldi	r24, 0x59	; 89
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 82 04 	call	0x904	; 0x904 <UART_voidSetRxComplete_ISR>
 140:	08 95       	ret

00000142 <DIO_voidInit>:
		{
			ret = DIO_LOW;
		}
	}
	return ret;
}
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a bb       	out	0x1a, r24	; 26
 146:	87 bb       	out	0x17, r24	; 23
 148:	84 bb       	out	0x14, r24	; 20
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_voidSetPin>:
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	e8 f4       	brcc	.+58     	; 0x18c <DIO_voidSetPin+0x3e>
 152:	61 30       	cpi	r22, 0x01	; 1
 154:	69 f4       	brne	.+26     	; 0x170 <DIO_voidSetPin+0x22>
 156:	4b b3       	in	r20, 0x1b	; 27
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPin+0x16>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPin+0x12>
 168:	cb 01       	movw	r24, r22
 16a:	84 2b       	or	r24, r20
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	08 95       	ret
 170:	4b b3       	in	r20, 0x1b	; 27
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_voidSetPin+0x30>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_voidSetPin+0x2c>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	08 95       	ret
 18c:	80 31       	cpi	r24, 0x10	; 16
 18e:	f8 f4       	brcc	.+62     	; 0x1ce <DIO_voidSetPin+0x80>
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	71 f4       	brne	.+28     	; 0x1b0 <DIO_voidSetPin+0x62>
 194:	48 b3       	in	r20, 0x18	; 24
 196:	88 50       	subi	r24, 0x08	; 8
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPin+0x56>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPin+0x52>
 1a8:	cb 01       	movw	r24, r22
 1aa:	84 2b       	or	r24, r20
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret
 1b0:	48 b3       	in	r20, 0x18	; 24
 1b2:	88 50       	subi	r24, 0x08	; 8
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	b9 01       	movw	r22, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_voidSetPin+0x72>
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_voidSetPin+0x6e>
 1c4:	cb 01       	movw	r24, r22
 1c6:	80 95       	com	r24
 1c8:	84 23       	and	r24, r20
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	08 95       	ret
 1ce:	88 31       	cpi	r24, 0x18	; 24
 1d0:	f8 f4       	brcc	.+62     	; 0x210 <DIO_voidSetPin+0xc2>
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	71 f4       	brne	.+28     	; 0x1f2 <DIO_voidSetPin+0xa4>
 1d6:	45 b3       	in	r20, 0x15	; 21
 1d8:	80 51       	subi	r24, 0x10	; 16
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_voidSetPin+0x98>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_voidSetPin+0x94>
 1ea:	cb 01       	movw	r24, r22
 1ec:	84 2b       	or	r24, r20
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	08 95       	ret
 1f2:	45 b3       	in	r20, 0x15	; 21
 1f4:	80 51       	subi	r24, 0x10	; 16
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_voidSetPin+0xb4>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_voidSetPin+0xb0>
 206:	cb 01       	movw	r24, r22
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	80 32       	cpi	r24, 0x20	; 32
 212:	f0 f4       	brcc	.+60     	; 0x250 <DIO_voidSetPin+0x102>
 214:	61 30       	cpi	r22, 0x01	; 1
 216:	71 f4       	brne	.+28     	; 0x234 <DIO_voidSetPin+0xe6>
 218:	42 b3       	in	r20, 0x12	; 18
 21a:	88 51       	subi	r24, 0x18	; 24
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_voidSetPin+0xda>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	8a 95       	dec	r24
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_voidSetPin+0xd6>
 22c:	cb 01       	movw	r24, r22
 22e:	84 2b       	or	r24, r20
 230:	82 bb       	out	0x12, r24	; 18
 232:	08 95       	ret
 234:	42 b3       	in	r20, 0x12	; 18
 236:	88 51       	subi	r24, 0x18	; 24
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPin+0xf6>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPin+0xf2>
 248:	cb 01       	movw	r24, r22
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_voidSetPort>:
 252:	81 11       	cpse	r24, r1
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_voidSetPort+0x8>
 256:	6b bb       	out	0x1b, r22	; 27
 258:	08 95       	ret
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	11 f4       	brne	.+4      	; 0x262 <DIO_voidSetPort+0x10>
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	11 f4       	brne	.+4      	; 0x26a <DIO_voidSetPort+0x18>
 266:	65 bb       	out	0x15, r22	; 21
 268:	08 95       	ret
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	09 f4       	brne	.+2      	; 0x270 <DIO_voidSetPort+0x1e>
 26e:	62 bb       	out	0x12, r22	; 18
 270:	08 95       	ret

00000272 <DIO_voidSetPortDir>:
 272:	81 11       	cpse	r24, r1
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_voidSetPortDir+0x8>
 276:	6a bb       	out	0x1a, r22	; 26
 278:	08 95       	ret
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	11 f4       	brne	.+4      	; 0x282 <DIO_voidSetPortDir+0x10>
 27e:	67 bb       	out	0x17, r22	; 23
 280:	08 95       	ret
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	11 f4       	brne	.+4      	; 0x28a <DIO_voidSetPortDir+0x18>
 286:	64 bb       	out	0x14, r22	; 20
 288:	08 95       	ret
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	09 f4       	brne	.+2      	; 0x290 <DIO_voidSetPortDir+0x1e>
 28e:	61 bb       	out	0x11, r22	; 17
 290:	08 95       	ret

00000292 <DIO_u8GetPinInPort>:

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;

    if(Local_PortNumber == 0)
 292:	81 11       	cpse	r24, r1
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <DIO_u8GetPinInPort+0x16>
	{
	    ret = GETBIT(PINA, Local_PinNumber);
 296:	89 b3       	in	r24, 0x19	; 25
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8GetPinInPort+0xe>
 29c:	95 95       	asr	r25
 29e:	87 95       	ror	r24
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8GetPinInPort+0xa>
 2a4:	81 70       	andi	r24, 0x01	; 1
 2a6:	08 95       	ret

    }else if(Local_PortNumber == 1)
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	49 f4       	brne	.+18     	; 0x2be <DIO_u8GetPinInPort+0x2c>
    {
	    ret = GETBIT(PINB, Local_PinNumber);
 2ac:	86 b3       	in	r24, 0x16	; 22
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_u8GetPinInPort+0x24>
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_u8GetPinInPort+0x20>
 2ba:	81 70       	andi	r24, 0x01	; 1
 2bc:	08 95       	ret

    }else if(Local_PortNumber == 2)
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	49 f4       	brne	.+18     	; 0x2d4 <DIO_u8GetPinInPort+0x42>
    {
	    ret = GETBIT(PINC, Local_PinNumber);
 2c2:	83 b3       	in	r24, 0x13	; 19
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_u8GetPinInPort+0x3a>
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_u8GetPinInPort+0x36>
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	08 95       	ret

    }else if(Local_PortNumber == 3)
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	49 f4       	brne	.+18     	; 0x2ea <DIO_u8GetPinInPort+0x58>
    {
	    ret = GETBIT(PIND, Local_PinNumber);
 2d8:	80 b3       	in	r24, 0x10	; 16
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8GetPinInPort+0x50>
 2de:	95 95       	asr	r25
 2e0:	87 95       	ror	r24
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8GetPinInPort+0x4c>
 2e6:	81 70       	andi	r24, 0x01	; 1
 2e8:	08 95       	ret
	return ret;
}

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
	    ret = GETBIT(PIND, Local_PinNumber);
    }

    return ret;

}
 2ec:	08 95       	ret

000002ee <main>:
extern u8 system_state ; 

int main(){
	
	u8 value ; 
	DIO_voidInit() ;
 2ee:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_voidInit>
	LCD_voidInit () ;
 2f2:	0e 94 34 02 	call	0x468	; 0x468 <LCD_voidInit>

	sei() ; 
 2f6:	78 94       	sei
	system_init () ; /*initiating the system state */
 2f8:	0e 94 1c 03 	call	0x638	; 0x638 <system_init>
	initComm() ;
 2fc:	0e 94 8f 00 	call	0x11e	; 0x11e <initComm>
	
	 
	while(1)
	{
	value = KeyPad_u8GetPressedKey() ; /*Serving the Keypad*/
 300:	0e 94 bf 01 	call	0x37e	; 0x37e <KeyPad_u8GetPressedKey>
	if (value != 255) system_manage(value) ; /*If key is pressed*/
 304:	8f 3f       	cpi	r24, 0xFF	; 255
 306:	11 f0       	breq	.+4      	; 0x30c <main+0x1e>
 308:	0e 94 22 03 	call	0x644	; 0x644 <system_manage>
	if (system_state == STATE_READINGS ) screen_readings_refresh() ; 
 30c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <system_state>
 310:	81 11       	cpse	r24, r1
 312:	02 c0       	rjmp	.+4      	; 0x318 <main+0x2a>
 314:	0e 94 c0 03 	call	0x780	; 0x780 <screen_readings_refresh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	83 e2       	ldi	r24, 0x23	; 35
 31a:	94 ef       	ldi	r25, 0xF4	; 244
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0x2e>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x34>
 322:	00 00       	nop
 324:	ed cf       	rjmp	.-38     	; 0x300 <main+0x12>

00000326 <KeyPad_u8AdjustKeyNumber_4x4>:

}

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	e0 31       	cpi	r30, 0x10	; 16
 32e:	f1 05       	cpc	r31, r1
 330:	10 f5       	brcc	.+68     	; 0x376 <KeyPad_u8AdjustKeyNumber_4x4+0x50>
 332:	e6 5d       	subi	r30, 0xD6	; 214
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__tablejump2__>
	{
		case 1: return '7';
				break;
		case 2: return '8';
 33a:	88 e3       	ldi	r24, 0x38	; 56
 33c:	08 95       	ret
				break;
		case 3: return '9';
 33e:	89 e3       	ldi	r24, 0x39	; 57
 340:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
 342:	85 e2       	ldi	r24, 0x25	; 37
 344:	08 95       	ret
				break;
		case 5: return '4';
 346:	84 e3       	ldi	r24, 0x34	; 52
 348:	08 95       	ret
				break;
		case 6: return '5';
 34a:	85 e3       	ldi	r24, 0x35	; 53
 34c:	08 95       	ret
				break;
		case 7: return '6';
 34e:	86 e3       	ldi	r24, 0x36	; 54
 350:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 352:	8a e2       	ldi	r24, 0x2A	; 42
 354:	08 95       	ret
				break;
		case 9: return '1';
 356:	81 e3       	ldi	r24, 0x31	; 49
 358:	08 95       	ret
				break;
		case 10: return '2';
 35a:	82 e3       	ldi	r24, 0x32	; 50
 35c:	08 95       	ret
				break;
		case 11: return '3';
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 362:	8d e2       	ldi	r24, 0x2D	; 45
 364:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
 366:	8d e0       	ldi	r24, 0x0D	; 13
 368:	08 95       	ret
				break;
		case 14: return '0';
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
 36e:	8d e3       	ldi	r24, 0x3D	; 61
 370:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 372:	8b e2       	ldi	r24, 0x2B	; 43
 374:	08 95       	ret
				break;
		default: return NO_KEY_PRESSED;
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	08 95       	ret

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
	{
		case 1: return '7';
 37a:	87 e3       	ldi	r24, 0x37	; 55
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return NO_KEY_PRESSED;
	}

}
 37c:	08 95       	ret

0000037e <KeyPad_u8GetPressedKey>:
#include "KeyPad_priv.h"
#include "KeyPad_config.h"
#include "KeyPad_int.h"

u8 KeyPad_u8GetPressedKey(void)
{
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	00 e0       	ldi	r16, 0x00	; 0
 390:	10 e0       	ldi	r17, 0x00	; 0
        /*
         * Each time only one of the column pins will be output and
         * the rest will be input pins including the row pins
         */

        DIO_voidSetPortDir(KEYPAD_PORT, (0b00010000<<col));
 392:	68 94       	set
 394:	cc 24       	eor	r12, r12
 396:	c4 f8       	bld	r12, 4
 398:	d1 2c       	mov	r13, r1
 39a:	e0 2e       	mov	r14, r16
 39c:	e6 01       	movw	r28, r12
 39e:	00 2e       	mov	r0, r16
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <KeyPad_u8GetPressedKey+0x28>
 3a2:	cc 0f       	add	r28, r28
 3a4:	dd 1f       	adc	r29, r29
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <KeyPad_u8GetPressedKey+0x24>
 3aa:	be 01       	movw	r22, r28
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 39 01 	call	0x272	; 0x272 <DIO_voidSetPortDir>

        /*
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));
 3b4:	6c 2f       	mov	r22, r28
 3b6:	60 95       	com	r22
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 29 01 	call	0x252	; 0x252 <DIO_voidSetPort>
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	fc 2e       	mov	r15, r28

        for(row=0; row<N_row; row++) /* loop for rows */
        {
            if(DIO_u8GetPinInPort(KEYPAD_PORT, row) == 0) /* if the switch is pressed in this row */
 3c4:	be 01       	movw	r22, r28
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8GetPinInPort>
 3ce:	89 2b       	or	r24, r25
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <KeyPad_u8GetPressedKey+0x64>
            {
                #if (N_col == 3)
                    return KeyPad_u8AdjustKeyNumber_4x3((row*N_col)+col+1);
                #elif (N_col == 4)
                    return KeyPad_u8AdjustKeyNumber_4x4((row*N_col)+col+1);
 3d2:	ff 0c       	add	r15, r15
 3d4:	ff 0c       	add	r15, r15
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	8e 0d       	add	r24, r14
 3da:	8f 0d       	add	r24, r15
 3dc:	0e 94 93 01 	call	0x326	; 0x326 <KeyPad_u8AdjustKeyNumber_4x4>
 3e0:	0a c0       	rjmp	.+20     	; 0x3f6 <KeyPad_u8GetPressedKey+0x78>
 3e2:	21 96       	adiw	r28, 0x01	; 1
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));

        for(row=0; row<N_row; row++) /* loop for rows */
 3e4:	c4 30       	cpi	r28, 0x04	; 4
 3e6:	d1 05       	cpc	r29, r1
 3e8:	61 f7       	brne	.-40     	; 0x3c2 <KeyPad_u8GetPressedKey+0x44>
 3ea:	0f 5f       	subi	r16, 0xFF	; 255
 3ec:	1f 4f       	sbci	r17, 0xFF	; 255

u8 KeyPad_u8GetPressedKey(void)
{
    u8 col,row;

    for(col=0; col<N_col; col++) /* loop for columns */
 3ee:	04 30       	cpi	r16, 0x04	; 4
 3f0:	11 05       	cpc	r17, r1
 3f2:	99 f6       	brne	.-90     	; 0x39a <KeyPad_u8GetPressedKey+0x1c>
                #endif
            }
        }
    }

    return NO_KEY_PRESSED;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret

00000408 <LCD_voidSendCommand>:
void LCD_voidDisplayStringRowColumn(u8 row,u8 col,const u8 *Str)
{
    LCD_voidGoToRowColumn(row,col);
	LCD_voidDisplayString(Str);

}
 408:	cf 93       	push	r28
 40a:	c8 2f       	mov	r28, r24
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	8a e0       	ldi	r24, 0x0A	; 10
 410:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	89 e0       	ldi	r24, 0x09	; 9
 418:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 41c:	89 ef       	ldi	r24, 0xF9	; 249
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <LCD_voidSendCommand+0x18>
 424:	00 c0       	rjmp	.+0      	; 0x426 <LCD_voidSendCommand+0x1e>
 426:	00 00       	nop
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	88 e0       	ldi	r24, 0x08	; 8
 42c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 430:	89 ef       	ldi	r24, 0xF9	; 249
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <LCD_voidSendCommand+0x2c>
 438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_voidSendCommand+0x32>
 43a:	00 00       	nop
 43c:	6c 2f       	mov	r22, r28
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 29 01 	call	0x252	; 0x252 <DIO_voidSetPort>
 444:	89 ef       	ldi	r24, 0xF9	; 249
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <LCD_voidSendCommand+0x40>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <LCD_voidSendCommand+0x46>
 44e:	00 00       	nop
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 458:	89 ef       	ldi	r24, 0xF9	; 249
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_voidSendCommand+0x54>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
 462:	00 00       	nop
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <LCD_voidInit>:
 468:	0e 94 a1 00 	call	0x142	; 0x142 <DIO_voidInit>
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 04 02 	call	0x408	; 0x408 <LCD_voidSendCommand>
 472:	88 e3       	ldi	r24, 0x38	; 56
 474:	0e 94 04 02 	call	0x408	; 0x408 <LCD_voidSendCommand>
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_voidSendCommand>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 04 02 	call	0x408	; 0x408 <LCD_voidSendCommand>
 484:	08 95       	ret

00000486 <LCD_voidDisplayCharacter>:
 486:	cf 93       	push	r28
 488:	c8 2f       	mov	r28, r24
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	8a e0       	ldi	r24, 0x0A	; 10
 48e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	89 e0       	ldi	r24, 0x09	; 9
 496:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 49a:	89 ef       	ldi	r24, 0xF9	; 249
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD_voidDisplayCharacter+0x18>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD_voidDisplayCharacter+0x1e>
 4a4:	00 00       	nop
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	88 e0       	ldi	r24, 0x08	; 8
 4aa:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 4ae:	89 ef       	ldi	r24, 0xF9	; 249
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_voidDisplayCharacter+0x2c>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_voidDisplayCharacter+0x32>
 4b8:	00 00       	nop
 4ba:	6c 2f       	mov	r22, r28
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 29 01 	call	0x252	; 0x252 <DIO_voidSetPort>
 4c2:	89 ef       	ldi	r24, 0xF9	; 249
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_voidDisplayCharacter+0x40>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_voidDisplayCharacter+0x46>
 4cc:	00 00       	nop
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	88 e0       	ldi	r24, 0x08	; 8
 4d2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_voidSetPin>
 4d6:	89 ef       	ldi	r24, 0xF9	; 249
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_voidDisplayCharacter+0x54>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_voidDisplayCharacter+0x5a>
 4e0:	00 00       	nop
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <LCD_voidDisplayString>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	fc 01       	movw	r30, r24
 4ee:	80 81       	ld	r24, Z
 4f0:	88 23       	and	r24, r24
 4f2:	59 f0       	breq	.+22     	; 0x50a <LCD_voidDisplayString+0x24>
 4f4:	8f 01       	movw	r16, r30
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
 4f8:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidDisplayCharacter>
 4fc:	cf 5f       	subi	r28, 0xFF	; 255
 4fe:	f8 01       	movw	r30, r16
 500:	ec 0f       	add	r30, r28
 502:	f1 1d       	adc	r31, r1
 504:	80 81       	ld	r24, Z
 506:	81 11       	cpse	r24, r1
 508:	f7 cf       	rjmp	.-18     	; 0x4f8 <LCD_voidDisplayString+0x12>
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <LCD_voidClearScreen>:
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 04 02 	call	0x408	; 0x408 <LCD_voidSendCommand>
 518:	08 95       	ret

0000051a <LCD_voidGoToRowColumn>:
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	09 f4       	brne	.+2      	; 0x520 <LCD_voidGoToRowColumn+0x6>
 51e:	60 5c       	subi	r22, 0xC0	; 192
 520:	86 2f       	mov	r24, r22
 522:	80 68       	ori	r24, 0x80	; 128
 524:	0e 94 04 02 	call	0x408	; 0x408 <LCD_voidSendCommand>
 528:	08 95       	ret

0000052a <LCD_voidSendInt>:
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_voidSendCommand(Address | SET_CURSOR_LOCATION);
}

void LCD_voidSendInt (const s32 num )
 {
 52a:	8f 92       	push	r8
 52c:	9f 92       	push	r9
 52e:	af 92       	push	r10
 530:	bf 92       	push	r11
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	60 97       	sbiw	r28, 0x10	; 16
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
	 char temp_char ;
	 char buffer[16] ;
	 char count, i ;
	 s32  temp_num = num ;
	 if (num == 0 )
 550:	61 15       	cp	r22, r1
 552:	71 05       	cpc	r23, r1
 554:	81 05       	cpc	r24, r1
 556:	91 05       	cpc	r25, r1
 558:	21 f4       	brne	.+8      	; 0x562 <LCD_voidSendInt+0x38>
	 {
		 LCD_voidDisplayCharacter('0') ;
 55a:	80 e3       	ldi	r24, 0x30	; 48
 55c:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidDisplayCharacter>
 560:	3e c0       	rjmp	.+124    	; 0x5de <LCD_voidSendInt+0xb4>
		 return ;
	 }else
	 {
		 if (temp_num < 0)
 562:	99 23       	and	r25, r25
 564:	84 f4       	brge	.+32     	; 0x586 <LCD_voidSendInt+0x5c>
		 	 {
			 	 temp_num = temp_num * (-1) ;
 566:	cc 24       	eor	r12, r12
 568:	dd 24       	eor	r13, r13
 56a:	76 01       	movw	r14, r12
 56c:	c6 1a       	sub	r12, r22
 56e:	d7 0a       	sbc	r13, r23
 570:	e8 0a       	sbc	r14, r24
 572:	f9 0a       	sbc	r15, r25
			 	 	 LCD_voidDisplayCharacter('-') ;
 574:	8d e2       	ldi	r24, 0x2D	; 45
 576:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidDisplayCharacter>
		 	 }
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
 57a:	c1 14       	cp	r12, r1
 57c:	d1 04       	cpc	r13, r1
 57e:	e1 04       	cpc	r14, r1
 580:	f1 04       	cpc	r15, r1
 582:	69 f1       	breq	.+90     	; 0x5de <LCD_voidSendInt+0xb4>
 584:	02 c0       	rjmp	.+4      	; 0x58a <LCD_voidSendInt+0x60>
void LCD_voidSendInt (const s32 num )
 {
	 char temp_char ;
	 char buffer[16] ;
	 char count, i ;
	 s32  temp_num = num ;
 586:	6b 01       	movw	r12, r22
 588:	7c 01       	movw	r14, r24
 58a:	10 e0       	ldi	r17, 0x00	; 0
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
		 {
			 temp_char = temp_num%10 ; //extracting the least significant digit
 58c:	0f 2e       	mov	r0, r31
 58e:	fa e0       	ldi	r31, 0x0A	; 10
 590:	8f 2e       	mov	r8, r31
 592:	91 2c       	mov	r9, r1
 594:	a1 2c       	mov	r10, r1
 596:	b1 2c       	mov	r11, r1
 598:	f0 2d       	mov	r31, r0
 59a:	c7 01       	movw	r24, r14
 59c:	b6 01       	movw	r22, r12
 59e:	a5 01       	movw	r20, r10
 5a0:	94 01       	movw	r18, r8
 5a2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodsi4>
			 temp_char += 48 ; //converting the digit to its ASCII representation
			 buffer[count] = temp_char ;
 5a6:	e1 e0       	ldi	r30, 0x01	; 1
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ec 0f       	add	r30, r28
 5ac:	fd 1f       	adc	r31, r29
 5ae:	e1 0f       	add	r30, r17
 5b0:	f1 1d       	adc	r31, r1
 5b2:	60 5d       	subi	r22, 0xD0	; 208
 5b4:	60 83       	st	Z, r22
			 count++ ;
 5b6:	1f 5f       	subi	r17, 0xFF	; 255
			 temp_num= temp_num/10 ;
 5b8:	c2 2e       	mov	r12, r18
 5ba:	d3 2e       	mov	r13, r19
 5bc:	e4 2e       	mov	r14, r20
 5be:	f5 2e       	mov	r15, r21
			 	 	 LCD_voidDisplayCharacter('-') ;
		 	 }
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
 5c0:	c1 14       	cp	r12, r1
 5c2:	d1 04       	cpc	r13, r1
 5c4:	e1 04       	cpc	r14, r1
 5c6:	f1 04       	cpc	r15, r1
 5c8:	41 f7       	brne	.-48     	; 0x59a <LCD_voidSendInt+0x70>
			 count++ ;
			 temp_num= temp_num/10 ;
		 }


		 for (i = count  ; i > 0; i--)
 5ca:	11 23       	and	r17, r17
 5cc:	41 f0       	breq	.+16     	; 0x5de <LCD_voidSendInt+0xb4>
		 {
			LCD_voidDisplayCharacter(buffer[i-1]) ;
 5ce:	fe 01       	movw	r30, r28
 5d0:	e1 0f       	add	r30, r17
 5d2:	f1 1d       	adc	r31, r1
 5d4:	80 81       	ld	r24, Z
 5d6:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidDisplayCharacter>
			 count++ ;
			 temp_num= temp_num/10 ;
		 }


		 for (i = count  ; i > 0; i--)
 5da:	11 50       	subi	r17, 0x01	; 1
 5dc:	c1 f7       	brne	.-16     	; 0x5ce <LCD_voidSendInt+0xa4>
		 {
			LCD_voidDisplayCharacter(buffer[i-1]) ;

		 }
	 }
 }
 5de:	60 96       	adiw	r28, 0x10	; 16
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	bf 90       	pop	r11
 5fa:	af 90       	pop	r10
 5fc:	9f 90       	pop	r9
 5fe:	8f 90       	pop	r8
 600:	08 95       	ret

00000602 <system_init_loginState>:
}

static void system_init_loginState (void)
{
	
	  LCD_voidClearScreen();
 602:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
	  if (pass_tries < 3 )
 606:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pass_tries>
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	70 f4       	brcc	.+28     	; 0x62a <system_init_loginState+0x28>
	  {
		LCD_voidDisplayString("Enter Pass try:");
 60e:	87 e6       	ldi	r24, 0x67	; 103
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
		LCD_voidDisplayCharacter(pass_tries + '1') ;
 616:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pass_tries>
 61a:	8f 5c       	subi	r24, 0xCF	; 207
 61c:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidDisplayCharacter>
		LCD_voidGoToRowColumn(1,0) ;
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
 628:	04 c0       	rjmp	.+8      	; 0x632 <system_init_loginState+0x30>
	
	  }else 
	  {
		 LCD_voidDisplayString("You cannot enter");
 62a:	87 e7       	ldi	r24, 0x77	; 119
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
	  }

	  pw_id = 0 ;
 632:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <pw_id>
 636:	08 95       	ret

00000638 <system_init>:
//static void wrong_password_alarm (void) ;
//static void system_settings_init (void) ;

void system_init (void ) 
{
	system_state = STATE_READINGS ; 
 638:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <system_state>
	readingToshow = 1 ;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <readingToshow>
 642:	08 95       	ret

00000644 <system_manage>:
}

void system_manage (u8 key_value) 
{
	/*system reset(by on/c key)*/
	if ( key_value == 13)
 644:	8d 30       	cpi	r24, 0x0D	; 13
 646:	19 f4       	brne	.+6      	; 0x64e <system_manage+0xa>
	{
		system_init() ;
 648:	0e 94 1c 03 	call	0x638	; 0x638 <system_init>
 64c:	08 95       	ret
	}else
	{

		if (system_state == STATE_READINGS)		// managing main(initial) frame
 64e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <system_state>
 652:	91 11       	cpse	r25, r1
 654:	25 c0       	rjmp	.+74     	; 0x6a0 <system_manage+0x5c>
		{
			if (key_value == '6')
 656:	86 33       	cpi	r24, 0x36	; 54
 658:	61 f4       	brne	.+24     	; 0x672 <system_manage+0x2e>
			{
				if (readingToshow == 6 )  readingToshow = 1 ; /*to ensure looping within the six readings*/ 
 65a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <readingToshow>
 65e:	86 30       	cpi	r24, 0x06	; 6
 660:	21 f4       	brne	.+8      	; 0x66a <system_manage+0x26>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <readingToshow>
 668:	08 95       	ret
				else readingToshow++ ; 
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <readingToshow>
 670:	08 95       	ret
				
			}else if (key_value == '4')
 672:	84 33       	cpi	r24, 0x34	; 52
 674:	61 f4       	brne	.+24     	; 0x68e <system_manage+0x4a>
			{
				if (readingToshow == 1 )  readingToshow = 6 ; /*to ensure looping within the six readings*/
 676:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <readingToshow>
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	21 f4       	brne	.+8      	; 0x686 <system_manage+0x42>
 67e:	86 e0       	ldi	r24, 0x06	; 6
 680:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <readingToshow>
 684:	08 95       	ret
				else readingToshow-- ;
 686:	81 50       	subi	r24, 0x01	; 1
 688:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <readingToshow>
 68c:	08 95       	ret
				
				
			}else if (key_value == '1')
 68e:	81 33       	cpi	r24, 0x31	; 49
 690:	09 f0       	breq	.+2      	; 0x694 <system_manage+0x50>
 692:	75 c0       	rjmp	.+234    	; 0x77e <system_manage+0x13a>
			{
				system_state = STATE_LOGIN ; 
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <system_state>
				system_init_loginState () ;		
 69a:	0e 94 01 03 	call	0x602	; 0x602 <system_init_loginState>
 69e:	08 95       	ret
			}
		
		}
		else if (system_state == STATE_LOGIN) // managing the logging frame
 6a0:	91 30       	cpi	r25, 0x01	; 1
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <system_manage+0x62>
 6a4:	6c c0       	rjmp	.+216    	; 0x77e <system_manage+0x13a>
		{
			if (key_value != '=')
 6a6:	8d 33       	cpi	r24, 0x3D	; 61
 6a8:	69 f0       	breq	.+26     	; 0x6c4 <system_manage+0x80>
			{
				entered_password[pw_id] = key_value ; /*concatenating the char in the password string*/
 6aa:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pw_id>
 6ae:	e9 2f       	mov	r30, r25
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	ec 5c       	subi	r30, 0xCC	; 204
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	80 83       	st	Z, r24
				pw_id++ ;/*incrementing the string index for next char assignment*/
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pw_id>
				LCD_voidDisplayCharacter(key_value);
 6be:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidDisplayCharacter>
 6c2:	08 95       	ret
			
			}else if (key_value == '=')/*the user ends the password */
			{
				 
				entered_password[pw_id] = 0 ;  /*terminating the password string*/
 6c4:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <pw_id>
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	ec 5c       	subi	r30, 0xCC	; 204
 6cc:	fe 4f       	sbci	r31, 0xFE	; 254
 6ce:	10 82       	st	Z, r1
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
	{
		if (system_password[i] != entered_password[i]) {
 6d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <entered_password>
 6d4:	81 33       	cpi	r24, 0x31	; 49
 6d6:	49 f4       	brne	.+18     	; 0x6ea <system_manage+0xa6>
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	15 c0       	rjmp	.+42     	; 0x706 <system_manage+0xc2>
 6dc:	fc 01       	movw	r30, r24
 6de:	ec 5c       	subi	r30, 0xCC	; 204
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	40 81       	ld	r20, Z
 6e4:	43 17       	cp	r20, r19
 6e6:	79 f0       	breq	.+30     	; 0x706 <system_manage+0xc2>
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <system_manage+0xaa>
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
 6ee:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <pass_tries>
 6f2:	2f 5f       	subi	r18, 0xFF	; 255
 6f4:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <pass_tries>
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 6f8:	fc 01       	movw	r30, r24
 6fa:	ec 5c       	subi	r30, 0xCC	; 204
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	80 81       	ld	r24, Z
 700:	88 23       	and	r24, r24
 702:	81 f0       	breq	.+32     	; 0x724 <system_manage+0xe0>
 704:	0a c0       	rjmp	.+20     	; 0x71a <system_manage+0xd6>
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
			break ;
		}
		i++ ;
 706:	2f 5f       	subi	r18, 0xFF	; 255
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 708:	82 2f       	mov	r24, r18
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	fc 01       	movw	r30, r24
 70e:	ea 5d       	subi	r30, 0xDA	; 218
 710:	fe 4f       	sbci	r31, 0xFE	; 254
 712:	30 81       	ld	r19, Z
 714:	31 11       	cpse	r19, r1
 716:	e2 cf       	rjmp	.-60     	; 0x6dc <system_manage+0x98>
 718:	2b c0       	rjmp	.+86     	; 0x770 <system_manage+0x12c>
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
	{
		pass_validity = 0 ; 
		pass_tries ++ ;
 71a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pass_tries>
 71e:	8f 5f       	subi	r24, 0xFF	; 255
 720:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pass_tries>
		LCD_voidClearScreen();
		LCD_voidDisplayString("Login successful");
		return 1 ; 
	}else
	{
			if (pass_tries >= 3 )
 724:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pass_tries>
 728:	83 30       	cpi	r24, 0x03	; 3
 72a:	38 f0       	brcs	.+14     	; 0x73a <system_manage+0xf6>
			{
			
				//wrong_password_alarm () ;
				LCD_voidClearScreen();
 72c:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				LCD_voidDisplayString("Wrong pass alarm on");
 730:	88 e8       	ldi	r24, 0x88	; 136
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 738:	08 95       	ret
				return 0 ; 
			}else 
			{
				LCD_voidClearScreen();
 73a:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				LCD_voidDisplayString("Give another try");
 73e:	8c e9       	ldi	r24, 0x9C	; 156
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 746:	2f e3       	ldi	r18, 0x3F	; 63
 748:	8d e0       	ldi	r24, 0x0D	; 13
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	80 40       	sbci	r24, 0x00	; 0
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <system_manage+0x108>
 754:	00 c0       	rjmp	.+0      	; 0x756 <system_manage+0x112>
 756:	00 00       	nop
				_delay_ms(1000) ; 
				system_init_loginState() ; /*give another try*/
 758:	0e 94 01 03 	call	0x602	; 0x602 <system_init_loginState>
		}

		
	
	}
}
 75c:	08 95       	ret
	}
	
	
	if (pass_validity == 1 )
	{
		pass_tries = 0 ;
 75e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pass_tries>
		LCD_voidClearScreen();
 762:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
		LCD_voidDisplayString("Login successful");
 766:	8d ea       	ldi	r24, 0xAD	; 173
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 76e:	08 95       	ret
			pass_tries ++ ;
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 770:	fc 01       	movw	r30, r24
 772:	ec 5c       	subi	r30, 0xCC	; 204
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	80 81       	ld	r24, Z
 778:	81 11       	cpse	r24, r1
 77a:	cf cf       	rjmp	.-98     	; 0x71a <system_manage+0xd6>
 77c:	f0 cf       	rjmp	.-32     	; 0x75e <system_manage+0x11a>
 77e:	08 95       	ret

00000780 <screen_readings_refresh>:


void screen_readings_refresh (void) 
{
	
	switch (readingToshow)
 780:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <readingToshow>
 784:	83 30       	cpi	r24, 0x03	; 3
 786:	e9 f1       	breq	.+122    	; 0x802 <screen_readings_refresh+0x82>
 788:	28 f4       	brcc	.+10     	; 0x794 <screen_readings_refresh+0x14>
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	61 f0       	breq	.+24     	; 0x7a6 <screen_readings_refresh+0x26>
 78e:	82 30       	cpi	r24, 0x02	; 2
 790:	01 f1       	breq	.+64     	; 0x7d2 <screen_readings_refresh+0x52>
 792:	08 95       	ret
 794:	85 30       	cpi	r24, 0x05	; 5
 796:	09 f4       	brne	.+2      	; 0x79a <screen_readings_refresh+0x1a>
 798:	62 c0       	rjmp	.+196    	; 0x85e <screen_readings_refresh+0xde>
 79a:	08 f4       	brcc	.+2      	; 0x79e <screen_readings_refresh+0x1e>
 79c:	48 c0       	rjmp	.+144    	; 0x82e <screen_readings_refresh+0xae>
 79e:	86 30       	cpi	r24, 0x06	; 6
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <screen_readings_refresh+0x24>
 7a2:	73 c0       	rjmp	.+230    	; 0x88a <screen_readings_refresh+0x10a>
 7a4:	08 95       	ret
	{
		case 1 : LCD_voidClearScreen();
 7a6:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				 LCD_voidDisplayString("TEMPRATURE");
 7aa:	8e eb       	ldi	r24, 0xBE	; 190
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				 LCD_voidGoToRowColumn(1,8) ; 
 7b2:	68 e0       	ldi	r22, 0x08	; 8
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
				 LCD_voidSendInt(reading_temp) ; 
 7ba:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <reading_temp>
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_voidSendInt>
				 LCD_voidDisplayString(" C"); 
 7c8:	89 ec       	ldi	r24, 0xC9	; 201
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				 break ; 
 7d0:	08 95       	ret
				 
		case 2 : LCD_voidClearScreen();
 7d2:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				 LCD_voidDisplayString("PIR SENSOR");
 7d6:	8c ec       	ldi	r24, 0xCC	; 204
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
			 	 LCD_voidGoToRowColumn(1,0) ;
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
				 if (reading_PIR == 0 ) LCD_voidDisplayString("Object detected");
 7e6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <reading_PIR>
 7ea:	81 11       	cpse	r24, r1
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <screen_readings_refresh+0x78>
 7ee:	87 ed       	ldi	r24, 0xD7	; 215
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 7f6:	08 95       	ret
				 else LCD_voidDisplayString("No Objects");
 7f8:	87 ee       	ldi	r24, 0xE7	; 231
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 800:	08 95       	ret
				 break ;
		
		
		case 3 :LCD_voidClearScreen();
 802:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				LCD_voidDisplayString("LDR SENSOR");
 806:	82 ef       	ldi	r24, 0xF2	; 242
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 80e:	68 e0       	ldi	r22, 0x08	; 8
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
				LCD_voidSendInt(reading_LDR) ;
 816:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <reading_LDR>
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_voidSendInt>
				LCD_voidDisplayString(" %");
 824:	8d ef       	ldi	r24, 0xFD	; 253
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				break ;
 82c:	08 95       	ret
		
		case 4 :LCD_voidClearScreen();
 82e:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				LCD_voidDisplayString("LED STATE");
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,12) ;
 83a:	6c e0       	ldi	r22, 0x0C	; 12
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
				if (reading_LED == 0 ) LCD_voidDisplayString("OFF");
 842:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <reading_LED>
 846:	81 11       	cpse	r24, r1
 848:	05 c0       	rjmp	.+10     	; 0x854 <screen_readings_refresh+0xd4>
 84a:	8a e0       	ldi	r24, 0x0A	; 10
 84c:	91 e0       	ldi	r25, 0x01	; 1
 84e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 852:	08 95       	ret
				else LCD_voidDisplayString("ON");
 854:	8e e0       	ldi	r24, 0x0E	; 14
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 85c:	08 95       	ret
				break ;
		
		case 5 :LCD_voidClearScreen();
 85e:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				LCD_voidDisplayString("Fan Speed");
 862:	81 e1       	ldi	r24, 0x11	; 17
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 86a:	68 e0       	ldi	r22, 0x08	; 8
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
				LCD_voidSendInt(reaing_motor_fan) ;
 872:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <reaing_motor_fan>
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_voidSendInt>
				LCD_voidDisplayString(" %");
 880:	8d ef       	ldi	r24, 0xFD	; 253
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				break ;
 888:	08 95       	ret
		
		case 6 :LCD_voidClearScreen();
 88a:	0e 94 89 02 	call	0x512	; 0x512 <LCD_voidClearScreen>
				LCD_voidDisplayString("Door State");
 88e:	8b e1       	ldi	r24, 0x1B	; 27
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 896:	68 e0       	ldi	r22, 0x08	; 8
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_voidGoToRowColumn>
				if (reading_door == 0 ) LCD_voidDisplayString("OFF");
 89e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <reading_door>
 8a2:	81 11       	cpse	r24, r1
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <screen_readings_refresh+0x130>
 8a6:	8a e0       	ldi	r24, 0x0A	; 10
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 8ae:	08 95       	ret
				else LCD_voidDisplayString("ON");
 8b0:	8e e0       	ldi	r24, 0x0E	; 14
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_voidDisplayString>
 8b8:	08 95       	ret

000008ba <UART_voidInit>:
void (*RX_COMPLETE_ISR)(void)  = '\0';

void UART_voidInit(void)
{
    /*** Double the transmission speed ***/
    SETBIT(UCSRA, U2X);
 8ba:	59 9a       	sbi	0x0b, 1	; 11

    /*** Enable Tx and Rx ***/
    SETBIT(UCSRB, RXEN);
 8bc:	54 9a       	sbi	0x0a, 4	; 10
    SETBIT(UCSRB, TXEN);
 8be:	53 9a       	sbi	0x0a, 3	; 10

    /*** Enable Tx and Rx Complete Interrupts ***/
    SETBIT(UCSRB, RXCIE);
 8c0:	57 9a       	sbi	0x0a, 7	; 10
    SETBIT(UCSRB, TXCIE);
 8c2:	56 9a       	sbi	0x0a, 6	; 10

    /*** Set 8-bit mode ***/
    CLRBIT(UCSRB, UCSZ2);
 8c4:	52 98       	cbi	0x0a, 2	; 10

    /*** Select UCSRC Register ***/
    SETBIT(UCSRC, URSEL);
 8c6:	80 b5       	in	r24, 0x20	; 32
 8c8:	80 68       	ori	r24, 0x80	; 128
 8ca:	80 bd       	out	0x20, r24	; 32

    /*** Set 8-bit mode ***/
    SETBIT(UCSRC, UCSZ0);
 8cc:	80 b5       	in	r24, 0x20	; 32
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	80 bd       	out	0x20, r24	; 32
    SETBIT(UCSRC, UCSZ1);
 8d2:	80 b5       	in	r24, 0x20	; 32
 8d4:	84 60       	ori	r24, 0x04	; 4
 8d6:	80 bd       	out	0x20, r24	; 32


    /*** Set Parity mode ***/
    #if (UART_PARITY == NO_PARITY)
        CLRBIT(UCSRC, UPM0);
 8d8:	80 b5       	in	r24, 0x20	; 32
 8da:	8f 7e       	andi	r24, 0xEF	; 239
 8dc:	80 bd       	out	0x20, r24	; 32
        CLRBIT(UCSRC, UPM1);
 8de:	80 b5       	in	r24, 0x20	; 32
 8e0:	8f 7d       	andi	r24, 0xDF	; 223
 8e2:	80 bd       	out	0x20, r24	; 32
        SETBIT(UCSRC, UPM1);
    #endif

    /*** Set Stop bit ***/
    #if (UART_STOP_BIT == STOP_BIT_1)
        CLRBIT(UCSRC, USBS);
 8e4:	80 b5       	in	r24, 0x20	; 32
 8e6:	87 7f       	andi	r24, 0xF7	; 247
 8e8:	80 bd       	out	0x20, r24	; 32
    /*** Set Baud Rate ***/
    #if (UART_BAUD_RATE == BAUD_RATE_4800)
        UBRRH = 0;
        UBRRL = 25;
    #elif (UART_BAUD_RATE == BAUD_RATE_9600)
        UBRRH = 0;
 8ea:	10 bc       	out	0x20, r1	; 32
        UBRRL = 12;
 8ec:	8c e0       	ldi	r24, 0x0C	; 12
 8ee:	89 b9       	out	0x09, r24	; 9
 8f0:	08 95       	ret

000008f2 <UART_voidSetDataRegister>:

}

void UART_voidSetDataRegister(u8 Local_Data)
{
    UDR = Local_Data;
 8f2:	8c b9       	out	0x0c, r24	; 12
 8f4:	08 95       	ret

000008f6 <UART_u8GetDataRegister>:
}

u8 UART_u8GetDataRegister(void)
{
    return UDR;
 8f6:	8c b1       	in	r24, 0x0c	; 12
}
 8f8:	08 95       	ret

000008fa <UART_voidSetTxComplete_ISR>:

void UART_voidSetTxComplete_ISR(void (*Local_ISR)(void))
{
    TX_COMPLETE_ISR = Local_ISR;
 8fa:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <TX_COMPLETE_ISR+0x1>
 8fe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <TX_COMPLETE_ISR>
 902:	08 95       	ret

00000904 <UART_voidSetRxComplete_ISR>:
}

void UART_voidSetRxComplete_ISR(void (*Local_ISR)(void))
{
    RX_COMPLETE_ISR = Local_ISR;
 904:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <RX_COMPLETE_ISR+0x1>
 908:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <RX_COMPLETE_ISR>
 90c:	08 95       	ret

0000090e <__vector_13>:
}

ISR(USART_TXC_vect)
{
 90e:	1f 92       	push	r1
 910:	0f 92       	push	r0
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	0f 92       	push	r0
 916:	11 24       	eor	r1, r1
 918:	2f 93       	push	r18
 91a:	3f 93       	push	r19
 91c:	4f 93       	push	r20
 91e:	5f 93       	push	r21
 920:	6f 93       	push	r22
 922:	7f 93       	push	r23
 924:	8f 93       	push	r24
 926:	9f 93       	push	r25
 928:	af 93       	push	r26
 92a:	bf 93       	push	r27
 92c:	ef 93       	push	r30
 92e:	ff 93       	push	r31
    TX_COMPLETE_ISR();
 930:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <TX_COMPLETE_ISR>
 934:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <TX_COMPLETE_ISR+0x1>
 938:	09 95       	icall
}
 93a:	ff 91       	pop	r31
 93c:	ef 91       	pop	r30
 93e:	bf 91       	pop	r27
 940:	af 91       	pop	r26
 942:	9f 91       	pop	r25
 944:	8f 91       	pop	r24
 946:	7f 91       	pop	r23
 948:	6f 91       	pop	r22
 94a:	5f 91       	pop	r21
 94c:	4f 91       	pop	r20
 94e:	3f 91       	pop	r19
 950:	2f 91       	pop	r18
 952:	0f 90       	pop	r0
 954:	0f be       	out	0x3f, r0	; 63
 956:	0f 90       	pop	r0
 958:	1f 90       	pop	r1
 95a:	18 95       	reti

0000095c <__vector_11>:

ISR(USART_RXC_vect)
{
 95c:	1f 92       	push	r1
 95e:	0f 92       	push	r0
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	0f 92       	push	r0
 964:	11 24       	eor	r1, r1
 966:	2f 93       	push	r18
 968:	3f 93       	push	r19
 96a:	4f 93       	push	r20
 96c:	5f 93       	push	r21
 96e:	6f 93       	push	r22
 970:	7f 93       	push	r23
 972:	8f 93       	push	r24
 974:	9f 93       	push	r25
 976:	af 93       	push	r26
 978:	bf 93       	push	r27
 97a:	ef 93       	push	r30
 97c:	ff 93       	push	r31
    RX_COMPLETE_ISR();
 97e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <RX_COMPLETE_ISR>
 982:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <RX_COMPLETE_ISR+0x1>
 986:	09 95       	icall
}
 988:	ff 91       	pop	r31
 98a:	ef 91       	pop	r30
 98c:	bf 91       	pop	r27
 98e:	af 91       	pop	r26
 990:	9f 91       	pop	r25
 992:	8f 91       	pop	r24
 994:	7f 91       	pop	r23
 996:	6f 91       	pop	r22
 998:	5f 91       	pop	r21
 99a:	4f 91       	pop	r20
 99c:	3f 91       	pop	r19
 99e:	2f 91       	pop	r18
 9a0:	0f 90       	pop	r0
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	0f 90       	pop	r0
 9a6:	1f 90       	pop	r1
 9a8:	18 95       	reti

000009aa <__divmodsi4>:
 9aa:	05 2e       	mov	r0, r21
 9ac:	97 fb       	bst	r25, 7
 9ae:	1e f4       	brtc	.+6      	; 0x9b6 <__divmodsi4+0xc>
 9b0:	00 94       	com	r0
 9b2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__negsi2>
 9b6:	57 fd       	sbrc	r21, 7
 9b8:	07 d0       	rcall	.+14     	; 0x9c8 <__divmodsi4_neg2>
 9ba:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__udivmodsi4>
 9be:	07 fc       	sbrc	r0, 7
 9c0:	03 d0       	rcall	.+6      	; 0x9c8 <__divmodsi4_neg2>
 9c2:	4e f4       	brtc	.+18     	; 0x9d6 <__divmodsi4_exit>
 9c4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__negsi2>

000009c8 <__divmodsi4_neg2>:
 9c8:	50 95       	com	r21
 9ca:	40 95       	com	r20
 9cc:	30 95       	com	r19
 9ce:	21 95       	neg	r18
 9d0:	3f 4f       	sbci	r19, 0xFF	; 255
 9d2:	4f 4f       	sbci	r20, 0xFF	; 255
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255

000009d6 <__divmodsi4_exit>:
 9d6:	08 95       	ret

000009d8 <__negsi2>:
 9d8:	90 95       	com	r25
 9da:	80 95       	com	r24
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	08 95       	ret

000009e8 <__tablejump2__>:
 9e8:	ee 0f       	add	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	05 90       	lpm	r0, Z+
 9ee:	f4 91       	lpm	r31, Z
 9f0:	e0 2d       	mov	r30, r0
 9f2:	09 94       	ijmp

000009f4 <__udivmodsi4>:
 9f4:	a1 e2       	ldi	r26, 0x21	; 33
 9f6:	1a 2e       	mov	r1, r26
 9f8:	aa 1b       	sub	r26, r26
 9fa:	bb 1b       	sub	r27, r27
 9fc:	fd 01       	movw	r30, r26
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <__udivmodsi4_ep>

00000a00 <__udivmodsi4_loop>:
 a00:	aa 1f       	adc	r26, r26
 a02:	bb 1f       	adc	r27, r27
 a04:	ee 1f       	adc	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	a2 17       	cp	r26, r18
 a0a:	b3 07       	cpc	r27, r19
 a0c:	e4 07       	cpc	r30, r20
 a0e:	f5 07       	cpc	r31, r21
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__udivmodsi4_ep>
 a12:	a2 1b       	sub	r26, r18
 a14:	b3 0b       	sbc	r27, r19
 a16:	e4 0b       	sbc	r30, r20
 a18:	f5 0b       	sbc	r31, r21

00000a1a <__udivmodsi4_ep>:
 a1a:	66 1f       	adc	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	1a 94       	dec	r1
 a24:	69 f7       	brne	.-38     	; 0xa00 <__udivmodsi4_loop>
 a26:	60 95       	com	r22
 a28:	70 95       	com	r23
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	9b 01       	movw	r18, r22
 a30:	ac 01       	movw	r20, r24
 a32:	bd 01       	movw	r22, r26
 a34:	cf 01       	movw	r24, r30
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
