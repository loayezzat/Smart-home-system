
INTERFACING_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  000008ba  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800130  00800130  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017e9  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b30  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d10  00000000  00000000  00002ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006da  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc7  00000000  00000000  00004512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000054d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	74 01       	movw	r14, r8
  56:	54 01       	movw	r10, r8
  58:	56 01       	movw	r10, r12
  5a:	58 01       	movw	r10, r16
  5c:	5a 01       	movw	r10, r20
  5e:	5c 01       	movw	r10, r24
  60:	5e 01       	movw	r10, r28
  62:	60 01       	movw	r12, r0
  64:	62 01       	movw	r12, r4
  66:	64 01       	movw	r12, r8
  68:	66 01       	movw	r12, r12
  6a:	68 01       	movw	r12, r16
  6c:	6a 01       	movw	r12, r20
  6e:	6c 01       	movw	r12, r24
  70:	6e 01       	movw	r12, r28
  72:	70 01       	movw	r14, r0

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ea eb       	ldi	r30, 0xBA	; 186
  88:	f8 e0       	ldi	r31, 0x08	; 8
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 33       	cpi	r26, 0x30	; 48
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e3       	ldi	r26, 0x30	; 48
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ae 33       	cpi	r26, 0x3E	; 62
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  aa:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <DIO_voidInit>:
		{
			ret = DIO_LOW;
		}
	}
	return ret;
}
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	84 bb       	out	0x14, r24	; 20
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	08 95       	ret

000000be <DIO_voidSetPin>:
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	e8 f4       	brcc	.+58     	; 0xfc <DIO_voidSetPin+0x3e>
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	69 f4       	brne	.+26     	; 0xe0 <DIO_voidSetPin+0x22>
  c6:	4b b3       	in	r20, 0x1b	; 27
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPin+0x16>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPin+0x12>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
  e0:	4b b3       	in	r20, 0x1b	; 27
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_voidSetPin+0x30>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_voidSetPin+0x2c>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	08 95       	ret
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	f8 f4       	brcc	.+62     	; 0x13e <DIO_voidSetPin+0x80>
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	71 f4       	brne	.+28     	; 0x120 <DIO_voidSetPin+0x62>
 104:	48 b3       	in	r20, 0x18	; 24
 106:	88 50       	subi	r24, 0x08	; 8
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPin+0x56>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPin+0x52>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 95       	ret
 120:	48 b3       	in	r20, 0x18	; 24
 122:	88 50       	subi	r24, 0x08	; 8
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_voidSetPin+0x72>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_voidSetPin+0x6e>
 134:	cb 01       	movw	r24, r22
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret
 13e:	88 31       	cpi	r24, 0x18	; 24
 140:	f8 f4       	brcc	.+62     	; 0x180 <DIO_voidSetPin+0xc2>
 142:	61 30       	cpi	r22, 0x01	; 1
 144:	71 f4       	brne	.+28     	; 0x162 <DIO_voidSetPin+0xa4>
 146:	45 b3       	in	r20, 0x15	; 21
 148:	80 51       	subi	r24, 0x10	; 16
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPin+0x98>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPin+0x94>
 15a:	cb 01       	movw	r24, r22
 15c:	84 2b       	or	r24, r20
 15e:	85 bb       	out	0x15, r24	; 21
 160:	08 95       	ret
 162:	45 b3       	in	r20, 0x15	; 21
 164:	80 51       	subi	r24, 0x10	; 16
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPin+0xb4>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPin+0xb0>
 176:	cb 01       	movw	r24, r22
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	08 95       	ret
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	f0 f4       	brcc	.+60     	; 0x1c0 <DIO_voidSetPin+0x102>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 f4       	brne	.+28     	; 0x1a4 <DIO_voidSetPin+0xe6>
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	88 51       	subi	r24, 0x18	; 24
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPin+0xda>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPin+0xd6>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret
 1a4:	42 b3       	in	r20, 0x12	; 18
 1a6:	88 51       	subi	r24, 0x18	; 24
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_voidSetPin+0xf6>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_voidSetPin+0xf2>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	08 95       	ret

000001c2 <DIO_voidSetPort>:
 1c2:	81 11       	cpse	r24, r1
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPort+0x8>
 1c6:	6b bb       	out	0x1b, r22	; 27
 1c8:	08 95       	ret
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <DIO_voidSetPort+0x10>
 1ce:	68 bb       	out	0x18, r22	; 24
 1d0:	08 95       	ret
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	11 f4       	brne	.+4      	; 0x1da <DIO_voidSetPort+0x18>
 1d6:	65 bb       	out	0x15, r22	; 21
 1d8:	08 95       	ret
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_voidSetPort+0x1e>
 1de:	62 bb       	out	0x12, r22	; 18
 1e0:	08 95       	ret

000001e2 <DIO_voidSetPortDir>:
 1e2:	81 11       	cpse	r24, r1
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPortDir+0x8>
 1e6:	6a bb       	out	0x1a, r22	; 26
 1e8:	08 95       	ret
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <DIO_voidSetPortDir+0x10>
 1ee:	67 bb       	out	0x17, r22	; 23
 1f0:	08 95       	ret
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	11 f4       	brne	.+4      	; 0x1fa <DIO_voidSetPortDir+0x18>
 1f6:	64 bb       	out	0x14, r22	; 20
 1f8:	08 95       	ret
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	09 f4       	brne	.+2      	; 0x200 <DIO_voidSetPortDir+0x1e>
 1fe:	61 bb       	out	0x11, r22	; 17
 200:	08 95       	ret

00000202 <DIO_u8GetPinInPort>:

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;

    if(Local_PortNumber == 0)
 202:	81 11       	cpse	r24, r1
 204:	09 c0       	rjmp	.+18     	; 0x218 <DIO_u8GetPinInPort+0x16>
	{
	    ret = GETBIT(PINA, Local_PinNumber);
 206:	89 b3       	in	r24, 0x19	; 25
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8GetPinInPort+0xe>
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8GetPinInPort+0xa>
 214:	81 70       	andi	r24, 0x01	; 1
 216:	08 95       	ret

    }else if(Local_PortNumber == 1)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	49 f4       	brne	.+18     	; 0x22e <DIO_u8GetPinInPort+0x2c>
    {
	    ret = GETBIT(PINB, Local_PinNumber);
 21c:	86 b3       	in	r24, 0x16	; 22
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_u8GetPinInPort+0x24>
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_u8GetPinInPort+0x20>
 22a:	81 70       	andi	r24, 0x01	; 1
 22c:	08 95       	ret

    }else if(Local_PortNumber == 2)
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	49 f4       	brne	.+18     	; 0x244 <DIO_u8GetPinInPort+0x42>
    {
	    ret = GETBIT(PINC, Local_PinNumber);
 232:	83 b3       	in	r24, 0x13	; 19
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_u8GetPinInPort+0x3a>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_u8GetPinInPort+0x36>
 240:	81 70       	andi	r24, 0x01	; 1
 242:	08 95       	ret

    }else if(Local_PortNumber == 3)
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	49 f4       	brne	.+18     	; 0x25a <DIO_u8GetPinInPort+0x58>
    {
	    ret = GETBIT(PIND, Local_PinNumber);
 248:	80 b3       	in	r24, 0x10	; 16
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_u8GetPinInPort+0x50>
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_u8GetPinInPort+0x4c>
 256:	81 70       	andi	r24, 0x01	; 1
 258:	08 95       	ret
	return ret;
}

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;
 25a:	80 e0       	ldi	r24, 0x00	; 0
	    ret = GETBIT(PIND, Local_PinNumber);
    }

    return ret;

}
 25c:	08 95       	ret

0000025e <main>:
extern system_state ; 

int main(){
	
	u8 value ; 
	DIO_voidInit() ;
 25e:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_voidInit>
	LCD_voidInit () ;
 262:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_voidInit>


	system_init () ; /*initiating the system state */
 266:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <system_init>

	while(1)
	{
	value = KeyPad_u8GetPressedKey() ; /*Serving the Keypad*/
 26a:	0e 94 76 01 	call	0x2ec	; 0x2ec <KeyPad_u8GetPressedKey>
	if (value != 255) system_manage(value) ; /*If key is pressed*/
 26e:	8f 3f       	cpi	r24, 0xFF	; 255
 270:	11 f0       	breq	.+4      	; 0x276 <main+0x18>
 272:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <system_manage>
	if (system_state == STATE_READINGS ) screen_readings_refresh() ; 
 276:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <system_state>
 27a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <__bss_end>
 27e:	89 2b       	or	r24, r25
 280:	11 f4       	brne	.+4      	; 0x286 <main+0x28>
 282:	0e 94 77 03 	call	0x6ee	; 0x6ee <screen_readings_refresh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	83 e2       	ldi	r24, 0x23	; 35
 288:	94 ef       	ldi	r25, 0xF4	; 244
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x2c>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x32>
 290:	00 00       	nop
 292:	eb cf       	rjmp	.-42     	; 0x26a <main+0xc>

00000294 <KeyPad_u8AdjustKeyNumber_4x4>:

}

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	e0 31       	cpi	r30, 0x10	; 16
 29c:	f1 05       	cpc	r31, r1
 29e:	10 f5       	brcc	.+68     	; 0x2e4 <KeyPad_u8AdjustKeyNumber_4x4+0x50>
 2a0:	e6 5d       	subi	r30, 0xD6	; 214
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	0c 94 33 04 	jmp	0x866	; 0x866 <__tablejump2__>
	{
		case 1: return '7';
				break;
		case 2: return '8';
 2a8:	88 e3       	ldi	r24, 0x38	; 56
 2aa:	08 95       	ret
				break;
		case 3: return '9';
 2ac:	89 e3       	ldi	r24, 0x39	; 57
 2ae:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
 2b0:	85 e2       	ldi	r24, 0x25	; 37
 2b2:	08 95       	ret
				break;
		case 5: return '4';
 2b4:	84 e3       	ldi	r24, 0x34	; 52
 2b6:	08 95       	ret
				break;
		case 6: return '5';
 2b8:	85 e3       	ldi	r24, 0x35	; 53
 2ba:	08 95       	ret
				break;
		case 7: return '6';
 2bc:	86 e3       	ldi	r24, 0x36	; 54
 2be:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 2c0:	8a e2       	ldi	r24, 0x2A	; 42
 2c2:	08 95       	ret
				break;
		case 9: return '1';
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	08 95       	ret
				break;
		case 10: return '2';
 2c8:	82 e3       	ldi	r24, 0x32	; 50
 2ca:	08 95       	ret
				break;
		case 11: return '3';
 2cc:	83 e3       	ldi	r24, 0x33	; 51
 2ce:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 2d0:	8d e2       	ldi	r24, 0x2D	; 45
 2d2:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	08 95       	ret
				break;
		case 14: return '0';
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
 2dc:	8d e3       	ldi	r24, 0x3D	; 61
 2de:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 2e0:	8b e2       	ldi	r24, 0x2B	; 43
 2e2:	08 95       	ret
				break;
		default: return NO_KEY_PRESSED;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	08 95       	ret

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
	{
		case 1: return '7';
 2e8:	87 e3       	ldi	r24, 0x37	; 55
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return NO_KEY_PRESSED;
	}

}
 2ea:	08 95       	ret

000002ec <KeyPad_u8GetPressedKey>:
#include "KeyPad_priv.h"
#include "KeyPad_config.h"
#include "KeyPad_int.h"

u8 KeyPad_u8GetPressedKey(void)
{
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
        /*
         * Each time only one of the column pins will be output and
         * the rest will be input pins including the row pins
         */

        DIO_voidSetPortDir(KEYPAD_PORT, (0b00010000<<col));
 300:	68 94       	set
 302:	cc 24       	eor	r12, r12
 304:	c4 f8       	bld	r12, 4
 306:	d1 2c       	mov	r13, r1
 308:	e0 2e       	mov	r14, r16
 30a:	e6 01       	movw	r28, r12
 30c:	00 2e       	mov	r0, r16
 30e:	02 c0       	rjmp	.+4      	; 0x314 <KeyPad_u8GetPressedKey+0x28>
 310:	cc 0f       	add	r28, r28
 312:	dd 1f       	adc	r29, r29
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <KeyPad_u8GetPressedKey+0x24>
 318:	be 01       	movw	r22, r28
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_voidSetPortDir>

        /*
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));
 322:	6c 2f       	mov	r22, r28
 324:	60 95       	com	r22
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidSetPort>
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	fc 2e       	mov	r15, r28

        for(row=0; row<N_row; row++) /* loop for rows */
        {
            if(DIO_u8GetPinInPort(KEYPAD_PORT, row) == 0) /* if the switch is pressed in this row */
 332:	be 01       	movw	r22, r28
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 01 01 	call	0x202	; 0x202 <DIO_u8GetPinInPort>
 33c:	89 2b       	or	r24, r25
 33e:	41 f4       	brne	.+16     	; 0x350 <KeyPad_u8GetPressedKey+0x64>
            {
                #if (N_col == 3)
                    return KeyPad_u8AdjustKeyNumber_4x3((row*N_col)+col+1);
                #elif (N_col == 4)
                    return KeyPad_u8AdjustKeyNumber_4x4((row*N_col)+col+1);
 340:	ff 0c       	add	r15, r15
 342:	ff 0c       	add	r15, r15
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	8e 0d       	add	r24, r14
 348:	8f 0d       	add	r24, r15
 34a:	0e 94 4a 01 	call	0x294	; 0x294 <KeyPad_u8AdjustKeyNumber_4x4>
 34e:	0a c0       	rjmp	.+20     	; 0x364 <KeyPad_u8GetPressedKey+0x78>
 350:	21 96       	adiw	r28, 0x01	; 1
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));

        for(row=0; row<N_row; row++) /* loop for rows */
 352:	c4 30       	cpi	r28, 0x04	; 4
 354:	d1 05       	cpc	r29, r1
 356:	61 f7       	brne	.-40     	; 0x330 <KeyPad_u8GetPressedKey+0x44>
 358:	0f 5f       	subi	r16, 0xFF	; 255
 35a:	1f 4f       	sbci	r17, 0xFF	; 255

u8 KeyPad_u8GetPressedKey(void)
{
    u8 col,row;

    for(col=0; col<N_col; col++) /* loop for columns */
 35c:	04 30       	cpi	r16, 0x04	; 4
 35e:	11 05       	cpc	r17, r1
 360:	99 f6       	brne	.-90     	; 0x308 <KeyPad_u8GetPressedKey+0x1c>
                #endif
            }
        }
    }

    return NO_KEY_PRESSED;
 362:	8f ef       	ldi	r24, 0xFF	; 255
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <LCD_voidSendCommand>:
void LCD_voidDisplayStringRowColumn(u8 row,u8 col,const u8 *Str)
{
    LCD_voidGoToRowColumn(row,col);
	LCD_voidDisplayString(Str);

}
 376:	cf 93       	push	r28
 378:	c8 2f       	mov	r28, r24
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	8a e0       	ldi	r24, 0x0A	; 10
 37e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	89 e0       	ldi	r24, 0x09	; 9
 386:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 38a:	89 ef       	ldi	r24, 0xF9	; 249
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_voidSendCommand+0x18>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_voidSendCommand+0x1e>
 394:	00 00       	nop
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	88 e0       	ldi	r24, 0x08	; 8
 39a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 39e:	89 ef       	ldi	r24, 0xF9	; 249
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_voidSendCommand+0x2c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_voidSendCommand+0x32>
 3a8:	00 00       	nop
 3aa:	6c 2f       	mov	r22, r28
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidSetPort>
 3b2:	89 ef       	ldi	r24, 0xF9	; 249
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_voidSendCommand+0x40>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_voidSendCommand+0x46>
 3bc:	00 00       	nop
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 3c6:	89 ef       	ldi	r24, 0xF9	; 249
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_voidSendCommand+0x54>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_voidSendCommand+0x5a>
 3d0:	00 00       	nop
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <LCD_voidInit>:
 3d6:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_voidInit>
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_voidSendCommand>
 3e0:	88 e3       	ldi	r24, 0x38	; 56
 3e2:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_voidSendCommand>
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_voidSendCommand>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_voidSendCommand>
 3f2:	08 95       	ret

000003f4 <LCD_voidDisplayCharacter>:
 3f4:	cf 93       	push	r28
 3f6:	c8 2f       	mov	r28, r24
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	89 e0       	ldi	r24, 0x09	; 9
 404:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 408:	89 ef       	ldi	r24, 0xF9	; 249
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 41c:	89 ef       	ldi	r24, 0xF9	; 249
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	6c 2f       	mov	r22, r28
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_voidSetPort>
 430:	89 ef       	ldi	r24, 0xF9	; 249
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPin>
 444:	89 ef       	ldi	r24, 0xF9	; 249
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <LCD_voidDisplayString>:
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	fc 01       	movw	r30, r24
 45c:	80 81       	ld	r24, Z
 45e:	88 23       	and	r24, r24
 460:	59 f0       	breq	.+22     	; 0x478 <__stack+0x19>
 462:	8f 01       	movw	r16, r30
 464:	c0 e0       	ldi	r28, 0x00	; 0
 466:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_voidDisplayCharacter>
 46a:	cf 5f       	subi	r28, 0xFF	; 255
 46c:	f8 01       	movw	r30, r16
 46e:	ec 0f       	add	r30, r28
 470:	f1 1d       	adc	r31, r1
 472:	80 81       	ld	r24, Z
 474:	81 11       	cpse	r24, r1
 476:	f7 cf       	rjmp	.-18     	; 0x466 <__stack+0x7>
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	08 95       	ret

00000480 <LCD_voidClearScreen>:
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_voidSendCommand>
 486:	08 95       	ret

00000488 <LCD_voidGoToRowColumn>:
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	09 f4       	brne	.+2      	; 0x48e <LCD_voidGoToRowColumn+0x6>
 48c:	60 5c       	subi	r22, 0xC0	; 192
 48e:	86 2f       	mov	r24, r22
 490:	80 68       	ori	r24, 0x80	; 128
 492:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_voidSendCommand>
 496:	08 95       	ret

00000498 <LCD_voidSendInt>:
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_voidSendCommand(Address | SET_CURSOR_LOCATION);
}

void LCD_voidSendInt (const s32 num )
 {
 498:	8f 92       	push	r8
 49a:	9f 92       	push	r9
 49c:	af 92       	push	r10
 49e:	bf 92       	push	r11
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	60 97       	sbiw	r28, 0x10	; 16
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
	 char temp_char ;
	 char buffer[16] ;
	 char count, i ;
	 s32  temp_num = num ;
	 if (num == 0 )
 4be:	61 15       	cp	r22, r1
 4c0:	71 05       	cpc	r23, r1
 4c2:	81 05       	cpc	r24, r1
 4c4:	91 05       	cpc	r25, r1
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <LCD_voidSendInt+0x38>
	 {
		 LCD_voidDisplayCharacter('0') ;
 4c8:	80 e3       	ldi	r24, 0x30	; 48
 4ca:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_voidDisplayCharacter>
 4ce:	3e c0       	rjmp	.+124    	; 0x54c <LCD_voidSendInt+0xb4>
		 return ;
	 }else
	 {
		 if (temp_num < 0)
 4d0:	99 23       	and	r25, r25
 4d2:	84 f4       	brge	.+32     	; 0x4f4 <LCD_voidSendInt+0x5c>
		 	 {
			 	 temp_num = temp_num * (-1) ;
 4d4:	cc 24       	eor	r12, r12
 4d6:	dd 24       	eor	r13, r13
 4d8:	76 01       	movw	r14, r12
 4da:	c6 1a       	sub	r12, r22
 4dc:	d7 0a       	sbc	r13, r23
 4de:	e8 0a       	sbc	r14, r24
 4e0:	f9 0a       	sbc	r15, r25
			 	 	 LCD_voidDisplayCharacter('-') ;
 4e2:	8d e2       	ldi	r24, 0x2D	; 45
 4e4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_voidDisplayCharacter>
		 	 }
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
 4e8:	c1 14       	cp	r12, r1
 4ea:	d1 04       	cpc	r13, r1
 4ec:	e1 04       	cpc	r14, r1
 4ee:	f1 04       	cpc	r15, r1
 4f0:	69 f1       	breq	.+90     	; 0x54c <LCD_voidSendInt+0xb4>
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <LCD_voidSendInt+0x60>
void LCD_voidSendInt (const s32 num )
 {
	 char temp_char ;
	 char buffer[16] ;
	 char count, i ;
	 s32  temp_num = num ;
 4f4:	6b 01       	movw	r12, r22
 4f6:	7c 01       	movw	r14, r24
 4f8:	10 e0       	ldi	r17, 0x00	; 0
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
		 {
			 temp_char = temp_num%10 ; //extracting the least significant digit
 4fa:	0f 2e       	mov	r0, r31
 4fc:	fa e0       	ldi	r31, 0x0A	; 10
 4fe:	8f 2e       	mov	r8, r31
 500:	91 2c       	mov	r9, r1
 502:	a1 2c       	mov	r10, r1
 504:	b1 2c       	mov	r11, r1
 506:	f0 2d       	mov	r31, r0
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	a5 01       	movw	r20, r10
 50e:	94 01       	movw	r18, r8
 510:	0e 94 14 04 	call	0x828	; 0x828 <__divmodsi4>
			 temp_char += 48 ; //converting the digit to its ASCII representation
			 buffer[count] = temp_char ;
 514:	e1 e0       	ldi	r30, 0x01	; 1
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	ec 0f       	add	r30, r28
 51a:	fd 1f       	adc	r31, r29
 51c:	e1 0f       	add	r30, r17
 51e:	f1 1d       	adc	r31, r1
 520:	60 5d       	subi	r22, 0xD0	; 208
 522:	60 83       	st	Z, r22
			 count++ ;
 524:	1f 5f       	subi	r17, 0xFF	; 255
			 temp_num= temp_num/10 ;
 526:	c2 2e       	mov	r12, r18
 528:	d3 2e       	mov	r13, r19
 52a:	e4 2e       	mov	r14, r20
 52c:	f5 2e       	mov	r15, r21
			 	 	 LCD_voidDisplayCharacter('-') ;
		 	 }
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
 52e:	c1 14       	cp	r12, r1
 530:	d1 04       	cpc	r13, r1
 532:	e1 04       	cpc	r14, r1
 534:	f1 04       	cpc	r15, r1
 536:	41 f7       	brne	.-48     	; 0x508 <LCD_voidSendInt+0x70>
			 count++ ;
			 temp_num= temp_num/10 ;
		 }


		 for (i = count  ; i > 0; i--)
 538:	11 23       	and	r17, r17
 53a:	41 f0       	breq	.+16     	; 0x54c <LCD_voidSendInt+0xb4>
		 {
			LCD_voidDisplayCharacter(buffer[i-1]) ;
 53c:	fe 01       	movw	r30, r28
 53e:	e1 0f       	add	r30, r17
 540:	f1 1d       	adc	r31, r1
 542:	80 81       	ld	r24, Z
 544:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_voidDisplayCharacter>
			 count++ ;
			 temp_num= temp_num/10 ;
		 }


		 for (i = count  ; i > 0; i--)
 548:	11 50       	subi	r17, 0x01	; 1
 54a:	c1 f7       	brne	.-16     	; 0x53c <LCD_voidSendInt+0xa4>
		 {
			LCD_voidDisplayCharacter(buffer[i-1]) ;

		 }
	 }
 }
 54c:	60 96       	adiw	r28, 0x10	; 16
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	ff 90       	pop	r15
 560:	ef 90       	pop	r14
 562:	df 90       	pop	r13
 564:	cf 90       	pop	r12
 566:	bf 90       	pop	r11
 568:	af 90       	pop	r10
 56a:	9f 90       	pop	r9
 56c:	8f 90       	pop	r8
 56e:	08 95       	ret

00000570 <system_init_loginState>:
}

static void system_init_loginState (void)
{
	
	  LCD_voidClearScreen();
 570:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
	  if (pass_tries < 3 )
 574:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	70 f4       	brcc	.+28     	; 0x598 <system_init_loginState+0x28>
	  {
		LCD_voidDisplayString("Enter Pass try:");
 57c:	86 e6       	ldi	r24, 0x66	; 102
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
		LCD_voidDisplayCharacter(pass_tries + '1') ;
 584:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 588:	8f 5c       	subi	r24, 0xCF	; 207
 58a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_voidDisplayCharacter>
		LCD_voidGoToRowColumn(1,0) ;
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <system_init_loginState+0x30>
	
	  }else 
	  {
		 LCD_voidDisplayString("You cannot enter");
 598:	86 e7       	ldi	r24, 0x76	; 118
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
	  }

	  pw_id = 0 ;
 5a0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <pw_id>
 5a4:	08 95       	ret

000005a6 <system_init>:
//static void wrong_password_alarm (void) ;
//static void system_settings_init (void) ;

void system_init (void ) 
{
	system_state = STATE_READINGS ; 
 5a6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <system_state>
	readingToshow = 1 ;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <readingToshow>
 5b0:	08 95       	ret

000005b2 <system_manage>:
}

void system_manage (u8 key_value) 
{
	/*system reset(by on/c key)*/
	if ( key_value == 13)
 5b2:	8d 30       	cpi	r24, 0x0D	; 13
 5b4:	19 f4       	brne	.+6      	; 0x5bc <system_manage+0xa>
	{
		system_init() ;
 5b6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <system_init>
 5ba:	08 95       	ret
	}else
	{

		if (system_state == STATE_READINGS)		// managing main(initial) frame
 5bc:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <system_state>
 5c0:	91 11       	cpse	r25, r1
 5c2:	25 c0       	rjmp	.+74     	; 0x60e <system_manage+0x5c>
		{
			if (key_value == '6')
 5c4:	86 33       	cpi	r24, 0x36	; 54
 5c6:	61 f4       	brne	.+24     	; 0x5e0 <system_manage+0x2e>
			{
				if (readingToshow == 6 )  readingToshow = 1 ; /*to ensure looping within the six readings*/ 
 5c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <readingToshow>
 5cc:	86 30       	cpi	r24, 0x06	; 6
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <system_manage+0x26>
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <readingToshow>
 5d6:	08 95       	ret
				else readingToshow++ ; 
 5d8:	8f 5f       	subi	r24, 0xFF	; 255
 5da:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <readingToshow>
 5de:	08 95       	ret
				
			}else if (key_value == '4')
 5e0:	84 33       	cpi	r24, 0x34	; 52
 5e2:	61 f4       	brne	.+24     	; 0x5fc <system_manage+0x4a>
			{
				if (readingToshow == 1 )  readingToshow = 6 ; /*to ensure looping within the six readings*/
 5e4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <readingToshow>
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	21 f4       	brne	.+8      	; 0x5f4 <system_manage+0x42>
 5ec:	86 e0       	ldi	r24, 0x06	; 6
 5ee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <readingToshow>
 5f2:	08 95       	ret
				else readingToshow-- ;
 5f4:	81 50       	subi	r24, 0x01	; 1
 5f6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <readingToshow>
 5fa:	08 95       	ret
				
				
			}else if (key_value == '1')
 5fc:	81 33       	cpi	r24, 0x31	; 49
 5fe:	09 f0       	breq	.+2      	; 0x602 <system_manage+0x50>
 600:	75 c0       	rjmp	.+234    	; 0x6ec <system_manage+0x13a>
			{
				system_state = STATE_LOGIN ; 
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <system_state>
				system_init_loginState () ;		
 608:	0e 94 b8 02 	call	0x570	; 0x570 <system_init_loginState>
 60c:	08 95       	ret
			}
		
		}
		else if (system_state == STATE_LOGIN) // managing the logging frame
 60e:	91 30       	cpi	r25, 0x01	; 1
 610:	09 f0       	breq	.+2      	; 0x614 <system_manage+0x62>
 612:	6c c0       	rjmp	.+216    	; 0x6ec <system_manage+0x13a>
		{
			if (key_value != '=')
 614:	8d 33       	cpi	r24, 0x3D	; 61
 616:	69 f0       	breq	.+26     	; 0x632 <system_manage+0x80>
			{
				entered_password[pw_id] = key_value ; /*concatenating the char in the password string*/
 618:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <pw_id>
 61c:	e9 2f       	mov	r30, r25
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	ee 5c       	subi	r30, 0xCE	; 206
 622:	fe 4f       	sbci	r31, 0xFE	; 254
 624:	80 83       	st	Z, r24
				pw_id++ ;/*incrementing the string index for next char assignment*/
 626:	9f 5f       	subi	r25, 0xFF	; 255
 628:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <pw_id>
				LCD_voidDisplayCharacter(key_value);
 62c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_voidDisplayCharacter>
 630:	08 95       	ret
			
			}else if (key_value == '=')/*the user ends the password */
			{
				 
				entered_password[pw_id] = 0 ;  /*terminating the password string*/
 632:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <pw_id>
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	ee 5c       	subi	r30, 0xCE	; 206
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	10 82       	st	Z, r1
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
	{
		if (system_password[i] != entered_password[i]) {
 63e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <entered_password>
 642:	81 33       	cpi	r24, 0x31	; 49
 644:	49 f4       	brne	.+18     	; 0x658 <system_manage+0xa6>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	15 c0       	rjmp	.+42     	; 0x674 <system_manage+0xc2>
 64a:	fc 01       	movw	r30, r24
 64c:	ee 5c       	subi	r30, 0xCE	; 206
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	40 81       	ld	r20, Z
 652:	43 17       	cp	r20, r19
 654:	79 f0       	breq	.+30     	; 0x674 <system_manage+0xc2>
 656:	02 c0       	rjmp	.+4      	; 0x65c <system_manage+0xaa>
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
 65c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 660:	2f 5f       	subi	r18, 0xFF	; 255
 662:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__data_end>
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 666:	fc 01       	movw	r30, r24
 668:	ee 5c       	subi	r30, 0xCE	; 206
 66a:	fe 4f       	sbci	r31, 0xFE	; 254
 66c:	80 81       	ld	r24, Z
 66e:	88 23       	and	r24, r24
 670:	81 f0       	breq	.+32     	; 0x692 <system_manage+0xe0>
 672:	0a c0       	rjmp	.+20     	; 0x688 <system_manage+0xd6>
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
			break ;
		}
		i++ ;
 674:	2f 5f       	subi	r18, 0xFF	; 255
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 676:	82 2f       	mov	r24, r18
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	fc 01       	movw	r30, r24
 67c:	eb 5d       	subi	r30, 0xDB	; 219
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	30 81       	ld	r19, Z
 682:	31 11       	cpse	r19, r1
 684:	e2 cf       	rjmp	.-60     	; 0x64a <system_manage+0x98>
 686:	2b c0       	rjmp	.+86     	; 0x6de <system_manage+0x12c>
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
	{
		pass_validity = 0 ; 
		pass_tries ++ ;
 688:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
		LCD_voidClearScreen();
		LCD_voidDisplayString("Login successful");
		return 1 ; 
	}else
	{
			if (pass_tries >= 3 )
 692:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 696:	83 30       	cpi	r24, 0x03	; 3
 698:	38 f0       	brcs	.+14     	; 0x6a8 <system_manage+0xf6>
			{
			
				//wrong_password_alarm () ;
				LCD_voidClearScreen();
 69a:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				LCD_voidDisplayString("Wrong pass alarm on");
 69e:	87 e8       	ldi	r24, 0x87	; 135
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 6a6:	08 95       	ret
				return 0 ; 
			}else 
			{
				LCD_voidClearScreen();
 6a8:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				LCD_voidDisplayString("Give another try");
 6ac:	8b e9       	ldi	r24, 0x9B	; 155
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 6b4:	2f e3       	ldi	r18, 0x3F	; 63
 6b6:	8d e0       	ldi	r24, 0x0D	; 13
 6b8:	93 e0       	ldi	r25, 0x03	; 3
 6ba:	21 50       	subi	r18, 0x01	; 1
 6bc:	80 40       	sbci	r24, 0x00	; 0
 6be:	90 40       	sbci	r25, 0x00	; 0
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <system_manage+0x108>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <system_manage+0x112>
 6c4:	00 00       	nop
				_delay_ms(1000) ; 
				system_init_loginState() ; /*give another try*/
 6c6:	0e 94 b8 02 	call	0x570	; 0x570 <system_init_loginState>
		}

		
	
	}
}
 6ca:	08 95       	ret
	}
	
	
	if (pass_validity == 1 )
	{
		pass_tries = 0 ;
 6cc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
		LCD_voidClearScreen();
 6d0:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
		LCD_voidDisplayString("Login successful");
 6d4:	8c ea       	ldi	r24, 0xAC	; 172
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 6dc:	08 95       	ret
			pass_tries ++ ;
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 6de:	fc 01       	movw	r30, r24
 6e0:	ee 5c       	subi	r30, 0xCE	; 206
 6e2:	fe 4f       	sbci	r31, 0xFE	; 254
 6e4:	80 81       	ld	r24, Z
 6e6:	81 11       	cpse	r24, r1
 6e8:	cf cf       	rjmp	.-98     	; 0x688 <system_manage+0xd6>
 6ea:	f0 cf       	rjmp	.-32     	; 0x6cc <system_manage+0x11a>
 6ec:	08 95       	ret

000006ee <screen_readings_refresh>:


void screen_readings_refresh (void) 
{
	
	switch (readingToshow)
 6ee:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <readingToshow>
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	e9 f1       	breq	.+122    	; 0x770 <screen_readings_refresh+0x82>
 6f6:	28 f4       	brcc	.+10     	; 0x702 <screen_readings_refresh+0x14>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	61 f0       	breq	.+24     	; 0x714 <screen_readings_refresh+0x26>
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	01 f1       	breq	.+64     	; 0x740 <screen_readings_refresh+0x52>
 700:	08 95       	ret
 702:	85 30       	cpi	r24, 0x05	; 5
 704:	09 f4       	brne	.+2      	; 0x708 <screen_readings_refresh+0x1a>
 706:	62 c0       	rjmp	.+196    	; 0x7cc <screen_readings_refresh+0xde>
 708:	08 f4       	brcc	.+2      	; 0x70c <screen_readings_refresh+0x1e>
 70a:	48 c0       	rjmp	.+144    	; 0x79c <screen_readings_refresh+0xae>
 70c:	86 30       	cpi	r24, 0x06	; 6
 70e:	09 f4       	brne	.+2      	; 0x712 <screen_readings_refresh+0x24>
 710:	73 c0       	rjmp	.+230    	; 0x7f8 <screen_readings_refresh+0x10a>
 712:	08 95       	ret
	{
		case 1 : LCD_voidClearScreen();
 714:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				 LCD_voidDisplayString("TEMPRATURE");
 718:	8d eb       	ldi	r24, 0xBD	; 189
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				 LCD_voidGoToRowColumn(1,8) ; 
 720:	68 e0       	ldi	r22, 0x08	; 8
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
				 LCD_voidSendInt(reading_temp) ; 
 728:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <reading_temp>
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_voidSendInt>
				 LCD_voidDisplayString(" C"); 
 736:	88 ec       	ldi	r24, 0xC8	; 200
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				 break ; 
 73e:	08 95       	ret
				 
		case 2 : LCD_voidClearScreen();
 740:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				 LCD_voidDisplayString("PIR SENSOR");
 744:	8b ec       	ldi	r24, 0xCB	; 203
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
			 	 LCD_voidGoToRowColumn(1,0) ;
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
				 if (reading_PIR == 0 ) LCD_voidDisplayString("Object detected");
 754:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <reading_PIR>
 758:	81 11       	cpse	r24, r1
 75a:	05 c0       	rjmp	.+10     	; 0x766 <screen_readings_refresh+0x78>
 75c:	86 ed       	ldi	r24, 0xD6	; 214
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 764:	08 95       	ret
				 else LCD_voidDisplayString("No Objects");
 766:	86 ee       	ldi	r24, 0xE6	; 230
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 76e:	08 95       	ret
				 break ;
		
		
		case 3 :LCD_voidClearScreen();
 770:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				LCD_voidDisplayString("LDR SENSOR");
 774:	81 ef       	ldi	r24, 0xF1	; 241
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 77c:	68 e0       	ldi	r22, 0x08	; 8
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
				LCD_voidSendInt(reading_LDR) ;
 784:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <reading_LDR>
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_voidSendInt>
				LCD_voidDisplayString(" %");
 792:	8c ef       	ldi	r24, 0xFC	; 252
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				break ;
 79a:	08 95       	ret
		
		case 4 :LCD_voidClearScreen();
 79c:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				LCD_voidDisplayString("LED STATE");
 7a0:	8f ef       	ldi	r24, 0xFF	; 255
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,12) ;
 7a8:	6c e0       	ldi	r22, 0x0C	; 12
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
				if (reading_LED == 0 ) LCD_voidDisplayString("OFF");
 7b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <reading_LED>
 7b4:	81 11       	cpse	r24, r1
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <screen_readings_refresh+0xd4>
 7b8:	89 e0       	ldi	r24, 0x09	; 9
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 7c0:	08 95       	ret
				else LCD_voidDisplayString("ON");
 7c2:	8d e0       	ldi	r24, 0x0D	; 13
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 7ca:	08 95       	ret
				break ;
		
		case 5 :LCD_voidClearScreen();
 7cc:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				LCD_voidDisplayString("Fan Speed");
 7d0:	80 e1       	ldi	r24, 0x10	; 16
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 7d8:	68 e0       	ldi	r22, 0x08	; 8
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
				LCD_voidSendInt(reaing_motor_fan) ;
 7e0:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <reaing_motor_fan>
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_voidSendInt>
				LCD_voidDisplayString(" %");
 7ee:	8c ef       	ldi	r24, 0xFC	; 252
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				break ;
 7f6:	08 95       	ret
		
		case 6 :LCD_voidClearScreen();
 7f8:	0e 94 40 02 	call	0x480	; 0x480 <LCD_voidClearScreen>
				LCD_voidDisplayString("Door State");
 7fc:	8a e1       	ldi	r24, 0x1A	; 26
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 804:	68 e0       	ldi	r22, 0x08	; 8
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	0e 94 44 02 	call	0x488	; 0x488 <LCD_voidGoToRowColumn>
				if (reading_door == 0 ) LCD_voidDisplayString("OFF");
 80c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 810:	81 11       	cpse	r24, r1
 812:	05 c0       	rjmp	.+10     	; 0x81e <screen_readings_refresh+0x130>
 814:	89 e0       	ldi	r24, 0x09	; 9
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 81c:	08 95       	ret
				else LCD_voidDisplayString("ON");
 81e:	8d e0       	ldi	r24, 0x0D	; 13
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidDisplayString>
 826:	08 95       	ret

00000828 <__divmodsi4>:
 828:	05 2e       	mov	r0, r21
 82a:	97 fb       	bst	r25, 7
 82c:	1e f4       	brtc	.+6      	; 0x834 <__divmodsi4+0xc>
 82e:	00 94       	com	r0
 830:	0e 94 2b 04 	call	0x856	; 0x856 <__negsi2>
 834:	57 fd       	sbrc	r21, 7
 836:	07 d0       	rcall	.+14     	; 0x846 <__divmodsi4_neg2>
 838:	0e 94 39 04 	call	0x872	; 0x872 <__udivmodsi4>
 83c:	07 fc       	sbrc	r0, 7
 83e:	03 d0       	rcall	.+6      	; 0x846 <__divmodsi4_neg2>
 840:	4e f4       	brtc	.+18     	; 0x854 <__divmodsi4_exit>
 842:	0c 94 2b 04 	jmp	0x856	; 0x856 <__negsi2>

00000846 <__divmodsi4_neg2>:
 846:	50 95       	com	r21
 848:	40 95       	com	r20
 84a:	30 95       	com	r19
 84c:	21 95       	neg	r18
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	4f 4f       	sbci	r20, 0xFF	; 255
 852:	5f 4f       	sbci	r21, 0xFF	; 255

00000854 <__divmodsi4_exit>:
 854:	08 95       	ret

00000856 <__negsi2>:
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	08 95       	ret

00000866 <__tablejump2__>:
 866:	ee 0f       	add	r30, r30
 868:	ff 1f       	adc	r31, r31
 86a:	05 90       	lpm	r0, Z+
 86c:	f4 91       	lpm	r31, Z
 86e:	e0 2d       	mov	r30, r0
 870:	09 94       	ijmp

00000872 <__udivmodsi4>:
 872:	a1 e2       	ldi	r26, 0x21	; 33
 874:	1a 2e       	mov	r1, r26
 876:	aa 1b       	sub	r26, r26
 878:	bb 1b       	sub	r27, r27
 87a:	fd 01       	movw	r30, r26
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__udivmodsi4_ep>

0000087e <__udivmodsi4_loop>:
 87e:	aa 1f       	adc	r26, r26
 880:	bb 1f       	adc	r27, r27
 882:	ee 1f       	adc	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	a2 17       	cp	r26, r18
 888:	b3 07       	cpc	r27, r19
 88a:	e4 07       	cpc	r30, r20
 88c:	f5 07       	cpc	r31, r21
 88e:	20 f0       	brcs	.+8      	; 0x898 <__udivmodsi4_ep>
 890:	a2 1b       	sub	r26, r18
 892:	b3 0b       	sbc	r27, r19
 894:	e4 0b       	sbc	r30, r20
 896:	f5 0b       	sbc	r31, r21

00000898 <__udivmodsi4_ep>:
 898:	66 1f       	adc	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	1a 94       	dec	r1
 8a2:	69 f7       	brne	.-38     	; 0x87e <__udivmodsi4_loop>
 8a4:	60 95       	com	r22
 8a6:	70 95       	com	r23
 8a8:	80 95       	com	r24
 8aa:	90 95       	com	r25
 8ac:	9b 01       	movw	r18, r22
 8ae:	ac 01       	movw	r20, r24
 8b0:	bd 01       	movw	r22, r26
 8b2:	cf 01       	movw	r24, r30
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
