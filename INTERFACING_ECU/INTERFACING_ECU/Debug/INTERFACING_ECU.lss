
INTERFACING_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00000a7c  00000b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  0080012a  0080012a  00000bda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfd  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d42  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109a  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000047ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000822  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001202  00000000  00000000  00005412  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	c7 01       	movw	r24, r14
  56:	a7 01       	movw	r20, r14
  58:	a9 01       	movw	r20, r18
  5a:	ab 01       	movw	r20, r22
  5c:	ad 01       	movw	r20, r26
  5e:	af 01       	movw	r20, r30
  60:	b1 01       	movw	r22, r2
  62:	b3 01       	movw	r22, r6
  64:	b5 01       	movw	r22, r10
  66:	b7 01       	movw	r22, r14
  68:	b9 01       	movw	r22, r18
  6a:	bb 01       	movw	r22, r22
  6c:	bd 01       	movw	r22, r26
  6e:	bf 01       	movw	r22, r30
  70:	c1 01       	movw	r24, r2
  72:	c3 01       	movw	r24, r6

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ec e7       	ldi	r30, 0x7C	; 124
  88:	fa e0       	ldi	r31, 0x0A	; 10
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	aa 32       	cpi	r26, 0x2A	; 42
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	aa e2       	ldi	r26, 0x2A	; 42
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	aa 35       	cpi	r26, 0x5A	; 90
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 81 01 	call	0x302	; 0x302 <main>
  aa:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <receive_byte>:
	transmittBuffer[i] = dataPacket[i] ;
	UART_voidSetDataRegister(transmittBuffer[0]) ; 
	transmittID = 1 ; 
	
	
}
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	c0 91 2d 01 	lds	r28, 0x012D	; 0x80012d <receiveID>
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	0e 94 9b 04 	call	0x936	; 0x936 <UART_u8GetDataRegister>
  c0:	c7 5b       	subi	r28, 0xB7	; 183
  c2:	de 4f       	sbci	r29, 0xFE	; 254
  c4:	88 83       	st	Y, r24
  c6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <receiveID>
  ca:	e8 2f       	mov	r30, r24
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	e7 5b       	subi	r30, 0xB7	; 183
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	90 81       	ld	r25, Z
  d4:	93 32       	cpi	r25, 0x23	; 35
  d6:	41 f4       	brne	.+16     	; 0xe8 <receive_byte+0x36>
  d8:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
  dc:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
  e0:	09 95       	icall
  e2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <receiveID>
  e6:	03 c0       	rjmp	.+6      	; 0xee <receive_byte+0x3c>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <receiveID>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <transmitt_byte>:
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  f8:	81 11       	cpse	r24, r1
  fa:	15 c0       	rjmp	.+42     	; 0x126 <transmitt_byte+0x32>
  fc:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <transmittID>
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e1 5c       	subi	r30, 0xC1	; 193
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	80 81       	ld	r24, Z
 108:	83 32       	cpi	r24, 0x23	; 35
 10a:	31 f4       	brne	.+12     	; 0x118 <transmitt_byte+0x24>
 10c:	0e 94 99 04 	call	0x932	; 0x932 <UART_voidSetDataRegister>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 116:	08 95       	ret
 118:	0e 94 99 04 	call	0x932	; 0x932 <UART_voidSetDataRegister>
 11c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <transmittID>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmittID>
 126:	08 95       	ret

00000128 <initComm>:
 128:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_voidInit>
 12c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <receiveID>
 130:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <transmittID>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 13a:	8a e7       	ldi	r24, 0x7A	; 122
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 9d 04 	call	0x93a	; 0x93a <UART_voidSetTxComplete_ISR>
 142:	89 e5       	ldi	r24, 0x59	; 89
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 a2 04 	call	0x944	; 0x944 <UART_voidSetRxComplete_ISR>
 14a:	08 95       	ret

0000014c <comm_set_ReceivedPacketFunction>:
}


 void comm_set_ReceivedPacketFunction (void (*f_ptr)( void ) ) 
{
	VOID_serveReceivedPacket = f_ptr ; 
 14c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 150:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 154:	08 95       	ret

00000156 <DIO_voidInit>:
		{
			ret = DIO_LOW;
		}
	}
	return ret;
}
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_voidSetPin>:
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	e8 f4       	brcc	.+58     	; 0x1a0 <DIO_voidSetPin+0x3e>
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <DIO_voidSetPin+0x22>
 16a:	4b b3       	in	r20, 0x1b	; 27
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_voidSetPin+0x16>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_voidSetPin+0x12>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	8b bb       	out	0x1b, r24	; 27
 182:	08 95       	ret
 184:	4b b3       	in	r20, 0x1b	; 27
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPin+0x30>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPin+0x2c>
 196:	cb 01       	movw	r24, r22
 198:	80 95       	com	r24
 19a:	84 23       	and	r24, r20
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	08 95       	ret
 1a0:	80 31       	cpi	r24, 0x10	; 16
 1a2:	f8 f4       	brcc	.+62     	; 0x1e2 <DIO_voidSetPin+0x80>
 1a4:	61 30       	cpi	r22, 0x01	; 1
 1a6:	71 f4       	brne	.+28     	; 0x1c4 <DIO_voidSetPin+0x62>
 1a8:	48 b3       	in	r20, 0x18	; 24
 1aa:	88 50       	subi	r24, 0x08	; 8
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	b9 01       	movw	r22, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_voidSetPin+0x56>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_voidSetPin+0x52>
 1bc:	cb 01       	movw	r24, r22
 1be:	84 2b       	or	r24, r20
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
 1c4:	48 b3       	in	r20, 0x18	; 24
 1c6:	88 50       	subi	r24, 0x08	; 8
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPin+0x72>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPin+0x6e>
 1d8:	cb 01       	movw	r24, r22
 1da:	80 95       	com	r24
 1dc:	84 23       	and	r24, r20
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
 1e2:	88 31       	cpi	r24, 0x18	; 24
 1e4:	f8 f4       	brcc	.+62     	; 0x224 <DIO_voidSetPin+0xc2>
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	71 f4       	brne	.+28     	; 0x206 <DIO_voidSetPin+0xa4>
 1ea:	45 b3       	in	r20, 0x15	; 21
 1ec:	80 51       	subi	r24, 0x10	; 16
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPin+0x98>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPin+0x94>
 1fe:	cb 01       	movw	r24, r22
 200:	84 2b       	or	r24, r20
 202:	85 bb       	out	0x15, r24	; 21
 204:	08 95       	ret
 206:	45 b3       	in	r20, 0x15	; 21
 208:	80 51       	subi	r24, 0x10	; 16
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPin+0xb4>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPin+0xb0>
 21a:	cb 01       	movw	r24, r22
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	85 bb       	out	0x15, r24	; 21
 222:	08 95       	ret
 224:	80 32       	cpi	r24, 0x20	; 32
 226:	f0 f4       	brcc	.+60     	; 0x264 <DIO_voidSetPin+0x102>
 228:	61 30       	cpi	r22, 0x01	; 1
 22a:	71 f4       	brne	.+28     	; 0x248 <DIO_voidSetPin+0xe6>
 22c:	42 b3       	in	r20, 0x12	; 18
 22e:	88 51       	subi	r24, 0x18	; 24
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_voidSetPin+0xda>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_voidSetPin+0xd6>
 240:	cb 01       	movw	r24, r22
 242:	84 2b       	or	r24, r20
 244:	82 bb       	out	0x12, r24	; 18
 246:	08 95       	ret
 248:	42 b3       	in	r20, 0x12	; 18
 24a:	88 51       	subi	r24, 0x18	; 24
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPin+0xf6>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPin+0xf2>
 25c:	cb 01       	movw	r24, r22
 25e:	80 95       	com	r24
 260:	84 23       	and	r24, r20
 262:	82 bb       	out	0x12, r24	; 18
 264:	08 95       	ret

00000266 <DIO_voidSetPort>:
 266:	81 11       	cpse	r24, r1
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_voidSetPort+0x8>
 26a:	6b bb       	out	0x1b, r22	; 27
 26c:	08 95       	ret
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	11 f4       	brne	.+4      	; 0x276 <DIO_voidSetPort+0x10>
 272:	68 bb       	out	0x18, r22	; 24
 274:	08 95       	ret
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	11 f4       	brne	.+4      	; 0x27e <DIO_voidSetPort+0x18>
 27a:	65 bb       	out	0x15, r22	; 21
 27c:	08 95       	ret
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	09 f4       	brne	.+2      	; 0x284 <DIO_voidSetPort+0x1e>
 282:	62 bb       	out	0x12, r22	; 18
 284:	08 95       	ret

00000286 <DIO_voidSetPortDir>:
 286:	81 11       	cpse	r24, r1
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_voidSetPortDir+0x8>
 28a:	6a bb       	out	0x1a, r22	; 26
 28c:	08 95       	ret
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	11 f4       	brne	.+4      	; 0x296 <DIO_voidSetPortDir+0x10>
 292:	67 bb       	out	0x17, r22	; 23
 294:	08 95       	ret
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	11 f4       	brne	.+4      	; 0x29e <DIO_voidSetPortDir+0x18>
 29a:	64 bb       	out	0x14, r22	; 20
 29c:	08 95       	ret
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <DIO_voidSetPortDir+0x1e>
 2a2:	61 bb       	out	0x11, r22	; 17
 2a4:	08 95       	ret

000002a6 <DIO_u8GetPinInPort>:

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;

    if(Local_PortNumber == 0)
 2a6:	81 11       	cpse	r24, r1
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <DIO_u8GetPinInPort+0x16>
	{
	    ret = GETBIT(PINA, Local_PinNumber);
 2aa:	89 b3       	in	r24, 0x19	; 25
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_u8GetPinInPort+0xe>
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_u8GetPinInPort+0xa>
 2b8:	81 70       	andi	r24, 0x01	; 1
 2ba:	08 95       	ret

    }else if(Local_PortNumber == 1)
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	49 f4       	brne	.+18     	; 0x2d2 <DIO_u8GetPinInPort+0x2c>
    {
	    ret = GETBIT(PINB, Local_PinNumber);
 2c0:	86 b3       	in	r24, 0x16	; 22
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_u8GetPinInPort+0x24>
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_u8GetPinInPort+0x20>
 2ce:	81 70       	andi	r24, 0x01	; 1
 2d0:	08 95       	ret

    }else if(Local_PortNumber == 2)
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	49 f4       	brne	.+18     	; 0x2e8 <DIO_u8GetPinInPort+0x42>
    {
	    ret = GETBIT(PINC, Local_PinNumber);
 2d6:	83 b3       	in	r24, 0x13	; 19
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_u8GetPinInPort+0x3a>
 2dc:	95 95       	asr	r25
 2de:	87 95       	ror	r24
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_u8GetPinInPort+0x36>
 2e4:	81 70       	andi	r24, 0x01	; 1
 2e6:	08 95       	ret

    }else if(Local_PortNumber == 3)
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	49 f4       	brne	.+18     	; 0x2fe <DIO_u8GetPinInPort+0x58>
    {
	    ret = GETBIT(PIND, Local_PinNumber);
 2ec:	80 b3       	in	r24, 0x10	; 16
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8GetPinInPort+0x50>
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8GetPinInPort+0x4c>
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	08 95       	ret
	return ret;
}

u8 DIO_u8GetPinInPort(u8 Local_PortNumber, u8 Local_PinNumber)
{
    u8 ret=DIO_LOW;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
	    ret = GETBIT(PIND, Local_PinNumber);
    }

    return ret;

}
 300:	08 95       	ret

00000302 <main>:
extern u8 system_state ; 

int main(){
	
	u8 value ; 
	DIO_voidInit() ;
 302:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_voidInit>
	LCD_voidInit () ;
 306:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_voidInit>

	sei() ; 
 30a:	78 94       	sei
	system_init () ;
 30c:	0e 94 38 03 	call	0x670	; 0x670 <system_init>
	
	initComm() ;
 310:	0e 94 94 00 	call	0x128	; 0x128 <initComm>
	
	 
	while(1)
	{
	value = KeyPad_u8GetPressedKey() ; /*Serving the Keypad*/
 314:	0e 94 c9 01 	call	0x392	; 0x392 <KeyPad_u8GetPressedKey>
	if (value != 255) system_manage(value) ; /*If key is pressed*/
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	11 f0       	breq	.+4      	; 0x320 <main+0x1e>
 31c:	0e 94 42 03 	call	0x684	; 0x684 <system_manage>
	if (system_state == STATE_READINGS ) screen_readings_refresh() ; 
 320:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <system_state>
 324:	81 11       	cpse	r24, r1
 326:	02 c0       	rjmp	.+4      	; 0x32c <main+0x2a>
 328:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <screen_readings_refresh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	94 ef       	ldi	r25, 0xF4	; 244
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x2e>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x34>
 336:	00 00       	nop
 338:	ed cf       	rjmp	.-38     	; 0x314 <main+0x12>

0000033a <KeyPad_u8AdjustKeyNumber_4x4>:

}

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	e0 31       	cpi	r30, 0x10	; 16
 342:	f1 05       	cpc	r31, r1
 344:	10 f5       	brcc	.+68     	; 0x38a <KeyPad_u8AdjustKeyNumber_4x4+0x50>
 346:	e6 5d       	subi	r30, 0xD6	; 214
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__tablejump2__>
	{
		case 1: return '7';
				break;
		case 2: return '8';
 34e:	88 e3       	ldi	r24, 0x38	; 56
 350:	08 95       	ret
				break;
		case 3: return '9';
 352:	89 e3       	ldi	r24, 0x39	; 57
 354:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
 356:	85 e2       	ldi	r24, 0x25	; 37
 358:	08 95       	ret
				break;
		case 5: return '4';
 35a:	84 e3       	ldi	r24, 0x34	; 52
 35c:	08 95       	ret
				break;
		case 6: return '5';
 35e:	85 e3       	ldi	r24, 0x35	; 53
 360:	08 95       	ret
				break;
		case 7: return '6';
 362:	86 e3       	ldi	r24, 0x36	; 54
 364:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 366:	8a e2       	ldi	r24, 0x2A	; 42
 368:	08 95       	ret
				break;
		case 9: return '1';
 36a:	81 e3       	ldi	r24, 0x31	; 49
 36c:	08 95       	ret
				break;
		case 10: return '2';
 36e:	82 e3       	ldi	r24, 0x32	; 50
 370:	08 95       	ret
				break;
		case 11: return '3';
 372:	83 e3       	ldi	r24, 0x33	; 51
 374:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 376:	8d e2       	ldi	r24, 0x2D	; 45
 378:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	08 95       	ret
				break;
		case 14: return '0';
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
 382:	8d e3       	ldi	r24, 0x3D	; 61
 384:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 386:	8b e2       	ldi	r24, 0x2B	; 43
 388:	08 95       	ret
				break;
		default: return NO_KEY_PRESSED;
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	08 95       	ret

u8 KeyPad_u8AdjustKeyNumber_4x4(u8 button_number)
{
    switch(button_number)
	{
		case 1: return '7';
 38e:	87 e3       	ldi	r24, 0x37	; 55
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return NO_KEY_PRESSED;
	}

}
 390:	08 95       	ret

00000392 <KeyPad_u8GetPressedKey>:
#include "KeyPad_priv.h"
#include "KeyPad_config.h"
#include "KeyPad_int.h"

u8 KeyPad_u8GetPressedKey(void)
{
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	00 e0       	ldi	r16, 0x00	; 0
 3a2:	10 e0       	ldi	r17, 0x00	; 0
        /*
         * Each time only one of the column pins will be output and
         * the rest will be input pins including the row pins
         */

        DIO_voidSetPortDir(KEYPAD_PORT, (0b00010000<<col));
 3a4:	68 94       	set
 3a6:	cc 24       	eor	r12, r12
 3a8:	c4 f8       	bld	r12, 4
 3aa:	d1 2c       	mov	r13, r1
 3ac:	f0 2e       	mov	r15, r16
 3ae:	e6 01       	movw	r28, r12
 3b0:	00 2e       	mov	r0, r16
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <KeyPad_u8GetPressedKey+0x26>
 3b4:	cc 0f       	add	r28, r28
 3b6:	dd 1f       	adc	r29, r29
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <KeyPad_u8GetPressedKey+0x22>
 3bc:	6c 2f       	mov	r22, r28
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 43 01 	call	0x286	; 0x286 <DIO_voidSetPortDir>

        /*
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));
 3c4:	6c 2f       	mov	r22, r28
 3c6:	60 95       	com	r22
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 33 01 	call	0x266	; 0x266 <DIO_voidSetPort>

        for(row=0; row<N_row; row++) /* loop for rows */
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
        {
            if(DIO_u8GetPinInPort(KEYPAD_PORT, row) == 0) /* if the switch is pressed in this row */
 3d0:	6c 2f       	mov	r22, r28
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8GetPinInPort>
 3d8:	81 11       	cpse	r24, r1
 3da:	08 c0       	rjmp	.+16     	; 0x3ec <KeyPad_u8GetPressedKey+0x5a>
            {
                #if (N_col == 3)
                    return KeyPad_u8AdjustKeyNumber_4x3((row*N_col)+col+1);
                #elif (N_col == 4)
                    return KeyPad_u8AdjustKeyNumber_4x4((row*N_col)+col+1);
 3dc:	cc 0f       	add	r28, r28
 3de:	cc 0f       	add	r28, r28
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	8f 0d       	add	r24, r15
 3e4:	8c 0f       	add	r24, r28
 3e6:	0e 94 9d 01 	call	0x33a	; 0x33a <KeyPad_u8AdjustKeyNumber_4x4>
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <KeyPad_u8GetPressedKey+0x6c>
         * clear the output pin column and enable the internal
         * pull up resistors for the other pins
         */
        DIO_voidSetPort(KEYPAD_PORT, (~(0b00010000<<col)));

        for(row=0; row<N_row; row++) /* loop for rows */
 3ec:	cf 5f       	subi	r28, 0xFF	; 255
 3ee:	c4 30       	cpi	r28, 0x04	; 4
 3f0:	79 f7       	brne	.-34     	; 0x3d0 <KeyPad_u8GetPressedKey+0x3e>
 3f2:	0f 5f       	subi	r16, 0xFF	; 255
 3f4:	1f 4f       	sbci	r17, 0xFF	; 255

u8 KeyPad_u8GetPressedKey(void)
{
    u8 col,row;

    for(col=0; col<N_col; col++) /* loop for columns */
 3f6:	04 30       	cpi	r16, 0x04	; 4
 3f8:	11 05       	cpc	r17, r1
 3fa:	c1 f6       	brne	.-80     	; 0x3ac <KeyPad_u8GetPressedKey+0x1a>
                #endif
            }
        }
    }

    return NO_KEY_PRESSED;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	08 95       	ret

0000040e <LCD_voidSendCommand>:
void LCD_voidDisplayStringRowColumn(u8 row,u8 col,const u8 *Str)
{
    LCD_voidGoToRowColumn(row,col);
	LCD_voidDisplayString(Str);

}
 40e:	cf 93       	push	r28
 410:	c8 2f       	mov	r28, r24
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	8a e0       	ldi	r24, 0x0A	; 10
 416:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	89 e0       	ldi	r24, 0x09	; 9
 41e:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 422:	89 ef       	ldi	r24, 0xF9	; 249
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <LCD_voidSendCommand+0x18>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <LCD_voidSendCommand+0x1e>
 42c:	00 00       	nop
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 436:	89 ef       	ldi	r24, 0xF9	; 249
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCD_voidSendCommand+0x2c>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <LCD_voidSendCommand+0x32>
 440:	00 00       	nop
 442:	6c 2f       	mov	r22, r28
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 33 01 	call	0x266	; 0x266 <DIO_voidSetPort>
 44a:	89 ef       	ldi	r24, 0xF9	; 249
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_voidSendCommand+0x40>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_voidSendCommand+0x46>
 454:	00 00       	nop
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 45e:	89 ef       	ldi	r24, 0xF9	; 249
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__stack+0x9>
 468:	00 00       	nop
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <LCD_voidInit>:
 46e:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_voidInit>
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidSendCommand>
 478:	88 e3       	ldi	r24, 0x38	; 56
 47a:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidSendCommand>
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidSendCommand>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidSendCommand>
 48a:	08 95       	ret

0000048c <LCD_voidDisplayCharacter>:
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	8a e0       	ldi	r24, 0x0A	; 10
 494:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	89 e0       	ldi	r24, 0x09	; 9
 49c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 4a0:	89 ef       	ldi	r24, 0xF9	; 249
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LCD_voidDisplayCharacter+0x18>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_voidDisplayCharacter+0x1e>
 4aa:	00 00       	nop
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 4b4:	89 ef       	ldi	r24, 0xF9	; 249
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_voidDisplayCharacter+0x2c>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_voidDisplayCharacter+0x32>
 4be:	00 00       	nop
 4c0:	6c 2f       	mov	r22, r28
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 33 01 	call	0x266	; 0x266 <DIO_voidSetPort>
 4c8:	89 ef       	ldi	r24, 0xF9	; 249
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_voidDisplayCharacter+0x40>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_voidDisplayCharacter+0x46>
 4d2:	00 00       	nop
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPin>
 4dc:	89 ef       	ldi	r24, 0xF9	; 249
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_voidDisplayCharacter+0x54>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_voidDisplayCharacter+0x5a>
 4e6:	00 00       	nop
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <LCD_voidDisplayString>:
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	88 23       	and	r24, r24
 4f8:	59 f0       	breq	.+22     	; 0x510 <LCD_voidDisplayString+0x24>
 4fa:	8f 01       	movw	r16, r30
 4fc:	c0 e0       	ldi	r28, 0x00	; 0
 4fe:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidDisplayCharacter>
 502:	cf 5f       	subi	r28, 0xFF	; 255
 504:	f8 01       	movw	r30, r16
 506:	ec 0f       	add	r30, r28
 508:	f1 1d       	adc	r31, r1
 50a:	80 81       	ld	r24, Z
 50c:	81 11       	cpse	r24, r1
 50e:	f7 cf       	rjmp	.-18     	; 0x4fe <LCD_voidDisplayString+0x12>
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <LCD_voidClearScreen>:
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidSendCommand>
 51e:	08 95       	ret

00000520 <LCD_voidGoToRowColumn>:
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	09 f4       	brne	.+2      	; 0x526 <LCD_voidGoToRowColumn+0x6>
 524:	60 5c       	subi	r22, 0xC0	; 192
 526:	86 2f       	mov	r24, r22
 528:	80 68       	ori	r24, 0x80	; 128
 52a:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidSendCommand>
 52e:	08 95       	ret

00000530 <LCD_voidSendInt>:
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_voidSendCommand(Address | SET_CURSOR_LOCATION);
}

void LCD_voidSendInt (const s32 num )
 {
 530:	8f 92       	push	r8
 532:	9f 92       	push	r9
 534:	af 92       	push	r10
 536:	bf 92       	push	r11
 538:	cf 92       	push	r12
 53a:	df 92       	push	r13
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	60 97       	sbiw	r28, 0x10	; 16
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
	 char temp_char ;
	 char buffer[16] ;
	 char count, i ;
	 s32  temp_num = num ;
	 if (num == 0 )
 556:	61 15       	cp	r22, r1
 558:	71 05       	cpc	r23, r1
 55a:	81 05       	cpc	r24, r1
 55c:	91 05       	cpc	r25, r1
 55e:	21 f4       	brne	.+8      	; 0x568 <LCD_voidSendInt+0x38>
	 {
		 LCD_voidDisplayCharacter('0') ;
 560:	80 e3       	ldi	r24, 0x30	; 48
 562:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidDisplayCharacter>
 566:	3e c0       	rjmp	.+124    	; 0x5e4 <LCD_voidSendInt+0xb4>
		 return ;
	 }else
	 {
		 if (temp_num < 0)
 568:	99 23       	and	r25, r25
 56a:	84 f4       	brge	.+32     	; 0x58c <LCD_voidSendInt+0x5c>
		 	 {
			 	 temp_num = temp_num * (-1) ;
 56c:	cc 24       	eor	r12, r12
 56e:	dd 24       	eor	r13, r13
 570:	76 01       	movw	r14, r12
 572:	c6 1a       	sub	r12, r22
 574:	d7 0a       	sbc	r13, r23
 576:	e8 0a       	sbc	r14, r24
 578:	f9 0a       	sbc	r15, r25
			 	 	 LCD_voidDisplayCharacter('-') ;
 57a:	8d e2       	ldi	r24, 0x2D	; 45
 57c:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidDisplayCharacter>
		 	 }
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
 580:	c1 14       	cp	r12, r1
 582:	d1 04       	cpc	r13, r1
 584:	e1 04       	cpc	r14, r1
 586:	f1 04       	cpc	r15, r1
 588:	69 f1       	breq	.+90     	; 0x5e4 <LCD_voidSendInt+0xb4>
 58a:	02 c0       	rjmp	.+4      	; 0x590 <LCD_voidSendInt+0x60>
void LCD_voidSendInt (const s32 num )
 {
	 char temp_char ;
	 char buffer[16] ;
	 char count, i ;
	 s32  temp_num = num ;
 58c:	6b 01       	movw	r12, r22
 58e:	7c 01       	movw	r14, r24
 590:	10 e0       	ldi	r17, 0x00	; 0
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
		 {
			 temp_char = temp_num%10 ; //extracting the least significant digit
 592:	0f 2e       	mov	r0, r31
 594:	fa e0       	ldi	r31, 0x0A	; 10
 596:	8f 2e       	mov	r8, r31
 598:	91 2c       	mov	r9, r1
 59a:	a1 2c       	mov	r10, r1
 59c:	b1 2c       	mov	r11, r1
 59e:	f0 2d       	mov	r31, r0
 5a0:	c7 01       	movw	r24, r14
 5a2:	b6 01       	movw	r22, r12
 5a4:	a5 01       	movw	r20, r10
 5a6:	94 01       	movw	r18, r8
 5a8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__divmodsi4>
			 temp_char += 48 ; //converting the digit to its ASCII representation
			 buffer[count] = temp_char ;
 5ac:	e1 e0       	ldi	r30, 0x01	; 1
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	ec 0f       	add	r30, r28
 5b2:	fd 1f       	adc	r31, r29
 5b4:	e1 0f       	add	r30, r17
 5b6:	f1 1d       	adc	r31, r1
 5b8:	60 5d       	subi	r22, 0xD0	; 208
 5ba:	60 83       	st	Z, r22
			 count++ ;
 5bc:	1f 5f       	subi	r17, 0xFF	; 255
			 temp_num= temp_num/10 ;
 5be:	c2 2e       	mov	r12, r18
 5c0:	d3 2e       	mov	r13, r19
 5c2:	e4 2e       	mov	r14, r20
 5c4:	f5 2e       	mov	r15, r21
			 	 	 LCD_voidDisplayCharacter('-') ;
		 	 }
		 count = 0 ;
		 /*this loop to extract no. from least significant digit to the most significant
		  * i.e. buffer[0] contain the LSD */
		 while (temp_num !=0)
 5c6:	c1 14       	cp	r12, r1
 5c8:	d1 04       	cpc	r13, r1
 5ca:	e1 04       	cpc	r14, r1
 5cc:	f1 04       	cpc	r15, r1
 5ce:	41 f7       	brne	.-48     	; 0x5a0 <LCD_voidSendInt+0x70>
			 count++ ;
			 temp_num= temp_num/10 ;
		 }


		 for (i = count  ; i > 0; i--)
 5d0:	11 23       	and	r17, r17
 5d2:	41 f0       	breq	.+16     	; 0x5e4 <LCD_voidSendInt+0xb4>
		 {
			LCD_voidDisplayCharacter(buffer[i-1]) ;
 5d4:	fe 01       	movw	r30, r28
 5d6:	e1 0f       	add	r30, r17
 5d8:	f1 1d       	adc	r31, r1
 5da:	80 81       	ld	r24, Z
 5dc:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidDisplayCharacter>
			 count++ ;
			 temp_num= temp_num/10 ;
		 }


		 for (i = count  ; i > 0; i--)
 5e0:	11 50       	subi	r17, 0x01	; 1
 5e2:	c1 f7       	brne	.-16     	; 0x5d4 <LCD_voidSendInt+0xa4>
		 {
			LCD_voidDisplayCharacter(buffer[i-1]) ;

		 }
	 }
 }
 5e4:	60 96       	adiw	r28, 0x10	; 16
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	bf 90       	pop	r11
 600:	af 90       	pop	r10
 602:	9f 90       	pop	r9
 604:	8f 90       	pop	r8
 606:	08 95       	ret

00000608 <system_serveReceivedPacket>:



static void system_serveReceivedPacket(void) 
{
	if (receiveBuffer[0] == 'd') /*Data Packet*/
 608:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receiveBuffer>
 60c:	84 36       	cpi	r24, 0x64	; 100
 60e:	a1 f4       	brne	.+40     	; 0x638 <system_serveReceivedPacket+0x30>
	{
		 temp = receiveBuffer[1] ;
 610:	e9 e4       	ldi	r30, 0x49	; 73
 612:	f1 e0       	ldi	r31, 0x01	; 1
 614:	81 81       	ldd	r24, Z+1	; 0x01
 616:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <temp>
		 ldr  = receiveBuffer[2] ;
 61a:	82 81       	ldd	r24, Z+2	; 0x02
 61c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ldr>
		 led  = receiveBuffer[3] ;
 620:	83 81       	ldd	r24, Z+3	; 0x03
 622:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <led>
		 pir  = receiveBuffer[4] ;
 626:	84 81       	ldd	r24, Z+4	; 0x04
 628:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <pir>
		 door = receiveBuffer[5] ;
 62c:	85 81       	ldd	r24, Z+5	; 0x05
 62e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <door>
		 fan  = receiveBuffer[6] ;
 632:	86 81       	ldd	r24, Z+6	; 0x06
 634:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <fan>
 638:	08 95       	ret

0000063a <system_init_loginState>:
}

static void system_init_loginState (void)
{
	
	  LCD_voidClearScreen();
 63a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
	  if (pass_tries < 3 )
 63e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pass_tries>
 642:	83 30       	cpi	r24, 0x03	; 3
 644:	70 f4       	brcc	.+28     	; 0x662 <system_init_loginState+0x28>
	  {
		LCD_voidDisplayString("Enter Pass try:");
 646:	81 e6       	ldi	r24, 0x61	; 97
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
		LCD_voidDisplayCharacter(pass_tries + '1') ;
 64e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pass_tries>
 652:	8f 5c       	subi	r24, 0xCF	; 207
 654:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidDisplayCharacter>
		LCD_voidGoToRowColumn(1,0) ;
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
 660:	04 c0       	rjmp	.+8      	; 0x66a <system_init_loginState+0x30>
	
	  }else 
	  {
		 LCD_voidDisplayString("You cannot enter");
 662:	81 e7       	ldi	r24, 0x71	; 113
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
	  }

	  pw_id = 0 ;
 66a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <pw_id>
 66e:	08 95       	ret

00000670 <system_init>:
//static void wrong_password_alarm (void) ;


void system_init (void ) 
{
	system_state = STATE_READINGS ; 
 670:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <system_state>
	readingToshow = 1 ;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <readingToshow>
	comm_set_ReceivedPacketFunction(system_serveReceivedPacket) ;
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	93 e0       	ldi	r25, 0x03	; 3
 67e:	0e 94 a6 00 	call	0x14c	; 0x14c <comm_set_ReceivedPacketFunction>
 682:	08 95       	ret

00000684 <system_manage>:
}

void system_manage (u8 key_value) 
{
	/*system reset(by on/c key)*/
	if ( key_value == 13)
 684:	8d 30       	cpi	r24, 0x0D	; 13
 686:	19 f4       	brne	.+6      	; 0x68e <system_manage+0xa>
	{
		system_init() ;
 688:	0e 94 38 03 	call	0x670	; 0x670 <system_init>
 68c:	08 95       	ret
	}else
	{

		if (system_state == STATE_READINGS)		// managing main(initial) frame
 68e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <system_state>
 692:	91 11       	cpse	r25, r1
 694:	25 c0       	rjmp	.+74     	; 0x6e0 <system_manage+0x5c>
		{
			if (key_value == '6')
 696:	86 33       	cpi	r24, 0x36	; 54
 698:	61 f4       	brne	.+24     	; 0x6b2 <system_manage+0x2e>
			{
				if (readingToshow == 6 )  readingToshow = 1 ; /*to ensure looping within the six readings*/ 
 69a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readingToshow>
 69e:	86 30       	cpi	r24, 0x06	; 6
 6a0:	21 f4       	brne	.+8      	; 0x6aa <system_manage+0x26>
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <readingToshow>
 6a8:	08 95       	ret
				else readingToshow++ ; 
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <readingToshow>
 6b0:	08 95       	ret
				
			}else if (key_value == '4')
 6b2:	84 33       	cpi	r24, 0x34	; 52
 6b4:	61 f4       	brne	.+24     	; 0x6ce <system_manage+0x4a>
			{
				if (readingToshow == 1 )  readingToshow = 6 ; /*to ensure looping within the six readings*/
 6b6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readingToshow>
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	21 f4       	brne	.+8      	; 0x6c6 <system_manage+0x42>
 6be:	86 e0       	ldi	r24, 0x06	; 6
 6c0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <readingToshow>
 6c4:	08 95       	ret
				else readingToshow-- ;
 6c6:	81 50       	subi	r24, 0x01	; 1
 6c8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <readingToshow>
 6cc:	08 95       	ret
				
				
			}else if (key_value == '1')
 6ce:	81 33       	cpi	r24, 0x31	; 49
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <system_manage+0x50>
 6d2:	75 c0       	rjmp	.+234    	; 0x7be <system_manage+0x13a>
			{
				system_state = STATE_LOGIN ; 
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <system_state>
				system_init_loginState () ;		
 6da:	0e 94 1d 03 	call	0x63a	; 0x63a <system_init_loginState>
 6de:	08 95       	ret
			}
		
		}
		else if (system_state == STATE_LOGIN) // managing the logging frame
 6e0:	91 30       	cpi	r25, 0x01	; 1
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <system_manage+0x62>
 6e4:	6c c0       	rjmp	.+216    	; 0x7be <system_manage+0x13a>
		{
			if (key_value != '=')
 6e6:	8d 33       	cpi	r24, 0x3D	; 61
 6e8:	69 f0       	breq	.+26     	; 0x704 <system_manage+0x80>
			{
				entered_password[pw_id] = key_value ; /*concatenating the char in the password string*/
 6ea:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <pw_id>
 6ee:	e9 2f       	mov	r30, r25
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	e0 5d       	subi	r30, 0xD0	; 208
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	80 83       	st	Z, r24
				pw_id++ ;/*incrementing the string index for next char assignment*/
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <pw_id>
				LCD_voidDisplayCharacter(key_value);
 6fe:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidDisplayCharacter>
 702:	08 95       	ret
			
			}else if (key_value == '=')/*the user ends the password */
			{
				 
				entered_password[pw_id] = 0 ;  /*terminating the password string*/
 704:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <pw_id>
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	e0 5d       	subi	r30, 0xD0	; 208
 70c:	fe 4f       	sbci	r31, 0xFE	; 254
 70e:	10 82       	st	Z, r1
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
	{
		if (system_password[i] != entered_password[i]) {
 710:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <entered_password>
 714:	81 33       	cpi	r24, 0x31	; 49
 716:	49 f4       	brne	.+18     	; 0x72a <system_manage+0xa6>
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	15 c0       	rjmp	.+42     	; 0x746 <system_manage+0xc2>
 71c:	fc 01       	movw	r30, r24
 71e:	e0 5d       	subi	r30, 0xD0	; 208
 720:	fe 4f       	sbci	r31, 0xFE	; 254
 722:	40 81       	ld	r20, Z
 724:	43 17       	cp	r20, r19
 726:	79 f0       	breq	.+30     	; 0x746 <system_manage+0xc2>
 728:	02 c0       	rjmp	.+4      	; 0x72e <system_manage+0xaa>
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
 72e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <pass_tries>
 732:	2f 5f       	subi	r18, 0xFF	; 255
 734:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <pass_tries>
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 738:	fc 01       	movw	r30, r24
 73a:	e0 5d       	subi	r30, 0xD0	; 208
 73c:	fe 4f       	sbci	r31, 0xFE	; 254
 73e:	80 81       	ld	r24, Z
 740:	88 23       	and	r24, r24
 742:	81 f0       	breq	.+32     	; 0x764 <system_manage+0xe0>
 744:	0a c0       	rjmp	.+20     	; 0x75a <system_manage+0xd6>
		if (system_password[i] != entered_password[i]) {
			pass_validity = 0 ; 
			pass_tries ++ ;
			break ;
		}
		i++ ;
 746:	2f 5f       	subi	r18, 0xFF	; 255
	
	
	/*Checking the password*/
	u8 i= 0 ;
	u8 pass_validity = 1 ;
	while (system_password[i] != 0 )
 748:	82 2f       	mov	r24, r18
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	fc 01       	movw	r30, r24
 74e:	e0 5e       	subi	r30, 0xE0	; 224
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	30 81       	ld	r19, Z
 754:	31 11       	cpse	r19, r1
 756:	e2 cf       	rjmp	.-60     	; 0x71c <system_manage+0x98>
 758:	2b c0       	rjmp	.+86     	; 0x7b0 <system_manage+0x12c>
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
	{
		pass_validity = 0 ; 
		pass_tries ++ ;
 75a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pass_tries>
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <pass_tries>
		LCD_voidClearScreen();
		LCD_voidDisplayString("Login successful");
		return 1 ; 
	}else
	{
			if (pass_tries >= 3 )
 764:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <pass_tries>
 768:	83 30       	cpi	r24, 0x03	; 3
 76a:	38 f0       	brcs	.+14     	; 0x77a <system_manage+0xf6>
			{
			
				//wrong_password_alarm () ;
				LCD_voidClearScreen();
 76c:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				LCD_voidDisplayString("Wrong pass alarm on");
 770:	82 e8       	ldi	r24, 0x82	; 130
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 778:	08 95       	ret
				return 0 ; 
			}else 
			{
				LCD_voidClearScreen();
 77a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				LCD_voidDisplayString("Give another try");
 77e:	86 e9       	ldi	r24, 0x96	; 150
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 786:	2f e3       	ldi	r18, 0x3F	; 63
 788:	8d e0       	ldi	r24, 0x0D	; 13
 78a:	93 e0       	ldi	r25, 0x03	; 3
 78c:	21 50       	subi	r18, 0x01	; 1
 78e:	80 40       	sbci	r24, 0x00	; 0
 790:	90 40       	sbci	r25, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <system_manage+0x108>
 794:	00 c0       	rjmp	.+0      	; 0x796 <system_manage+0x112>
 796:	00 00       	nop
				_delay_ms(1000) ; 
				system_init_loginState() ; /*give another try*/
 798:	0e 94 1d 03 	call	0x63a	; 0x63a <system_init_loginState>
		}

		
	
	}
}
 79c:	08 95       	ret
	}
	
	
	if (pass_validity == 1 )
	{
		pass_tries = 0 ;
 79e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pass_tries>
		LCD_voidClearScreen();
 7a2:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
		LCD_voidDisplayString("Login successful");
 7a6:	87 ea       	ldi	r24, 0xA7	; 167
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 7ae:	08 95       	ret
			pass_tries ++ ;
			break ;
		}
		i++ ;
	}
	if (entered_password[i] != 0 ) /*checking if entered pass has the same length*/
 7b0:	fc 01       	movw	r30, r24
 7b2:	e0 5d       	subi	r30, 0xD0	; 208
 7b4:	fe 4f       	sbci	r31, 0xFE	; 254
 7b6:	80 81       	ld	r24, Z
 7b8:	81 11       	cpse	r24, r1
 7ba:	cf cf       	rjmp	.-98     	; 0x75a <system_manage+0xd6>
 7bc:	f0 cf       	rjmp	.-32     	; 0x79e <system_manage+0x11a>
 7be:	08 95       	ret

000007c0 <screen_readings_refresh>:


void screen_readings_refresh (void) 
{
	
	switch (readingToshow)
 7c0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readingToshow>
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	e9 f1       	breq	.+122    	; 0x842 <screen_readings_refresh+0x82>
 7c8:	28 f4       	brcc	.+10     	; 0x7d4 <screen_readings_refresh+0x14>
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	61 f0       	breq	.+24     	; 0x7e6 <screen_readings_refresh+0x26>
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	01 f1       	breq	.+64     	; 0x812 <screen_readings_refresh+0x52>
 7d2:	08 95       	ret
 7d4:	85 30       	cpi	r24, 0x05	; 5
 7d6:	09 f4       	brne	.+2      	; 0x7da <screen_readings_refresh+0x1a>
 7d8:	62 c0       	rjmp	.+196    	; 0x89e <screen_readings_refresh+0xde>
 7da:	08 f4       	brcc	.+2      	; 0x7de <screen_readings_refresh+0x1e>
 7dc:	48 c0       	rjmp	.+144    	; 0x86e <screen_readings_refresh+0xae>
 7de:	86 30       	cpi	r24, 0x06	; 6
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <screen_readings_refresh+0x24>
 7e2:	73 c0       	rjmp	.+230    	; 0x8ca <screen_readings_refresh+0x10a>
 7e4:	08 95       	ret
	{
		case 1 : LCD_voidClearScreen();
 7e6:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				 LCD_voidDisplayString("TEMPRATURE");
 7ea:	88 eb       	ldi	r24, 0xB8	; 184
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				 LCD_voidGoToRowColumn(1,8) ; 
 7f2:	68 e0       	ldi	r22, 0x08	; 8
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
				 LCD_voidSendInt(temp) ; 
 7fa:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <temp>
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 98 02 	call	0x530	; 0x530 <LCD_voidSendInt>
				 LCD_voidDisplayString(" C"); 
 808:	83 ec       	ldi	r24, 0xC3	; 195
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				 break ; 
 810:	08 95       	ret
				 
		case 2 : LCD_voidClearScreen();
 812:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				 LCD_voidDisplayString("PIR SENSOR");
 816:	86 ec       	ldi	r24, 0xC6	; 198
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
			 	 LCD_voidGoToRowColumn(1,0) ;
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
				 if (pir == 0 ) LCD_voidDisplayString("Object detected");
 826:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <pir>
 82a:	81 11       	cpse	r24, r1
 82c:	05 c0       	rjmp	.+10     	; 0x838 <screen_readings_refresh+0x78>
 82e:	81 ed       	ldi	r24, 0xD1	; 209
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 836:	08 95       	ret
				 else LCD_voidDisplayString("No Objects");
 838:	81 ee       	ldi	r24, 0xE1	; 225
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 840:	08 95       	ret
				 break ;
		
		
		case 3 :LCD_voidClearScreen();
 842:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				LCD_voidDisplayString("LDR SENSOR");
 846:	8c ee       	ldi	r24, 0xEC	; 236
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 84e:	68 e0       	ldi	r22, 0x08	; 8
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
				LCD_voidSendInt(ldr) ;
 856:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ldr>
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 98 02 	call	0x530	; 0x530 <LCD_voidSendInt>
				LCD_voidDisplayString(" %");
 864:	87 ef       	ldi	r24, 0xF7	; 247
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				break ;
 86c:	08 95       	ret
		
		case 4 :LCD_voidClearScreen();
 86e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				LCD_voidDisplayString("LED STATE");
 872:	8a ef       	ldi	r24, 0xFA	; 250
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,12) ;
 87a:	6c e0       	ldi	r22, 0x0C	; 12
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
				if (led == 0 ) LCD_voidDisplayString("OFF");
 882:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <led>
 886:	81 11       	cpse	r24, r1
 888:	05 c0       	rjmp	.+10     	; 0x894 <screen_readings_refresh+0xd4>
 88a:	84 e0       	ldi	r24, 0x04	; 4
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 892:	08 95       	ret
				else LCD_voidDisplayString("ON");
 894:	88 e0       	ldi	r24, 0x08	; 8
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 89c:	08 95       	ret
				break ;
		
		case 5 :LCD_voidClearScreen();
 89e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				LCD_voidDisplayString("Fan Speed");
 8a2:	8b e0       	ldi	r24, 0x0B	; 11
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 8aa:	68 e0       	ldi	r22, 0x08	; 8
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
				LCD_voidSendInt(fan) ;
 8b2:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <fan>
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 98 02 	call	0x530	; 0x530 <LCD_voidSendInt>
				LCD_voidDisplayString(" %");
 8c0:	87 ef       	ldi	r24, 0xF7	; 247
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				break ;
 8c8:	08 95       	ret
		
		case 6 :LCD_voidClearScreen();
 8ca:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_voidClearScreen>
				LCD_voidDisplayString("Door State");
 8ce:	85 e1       	ldi	r24, 0x15	; 21
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
				LCD_voidGoToRowColumn(1,8) ;
 8d6:	68 e0       	ldi	r22, 0x08	; 8
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	0e 94 90 02 	call	0x520	; 0x520 <LCD_voidGoToRowColumn>
				if (door == 0 ) LCD_voidDisplayString("OFF");
 8de:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <door>
 8e2:	81 11       	cpse	r24, r1
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <screen_readings_refresh+0x130>
 8e6:	84 e0       	ldi	r24, 0x04	; 4
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 8ee:	08 95       	ret
				else LCD_voidDisplayString("ON");
 8f0:	88 e0       	ldi	r24, 0x08	; 8
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidDisplayString>
 8f8:	08 95       	ret

000008fa <UART_voidInit>:
void (*RX_COMPLETE_ISR)(void)  = '\0';

void UART_voidInit(void)
{
    /*** Double the transmission speed ***/
    SETBIT(UCSRA, U2X);
 8fa:	59 9a       	sbi	0x0b, 1	; 11

    /*** Enable Tx and Rx ***/
    SETBIT(UCSRB, RXEN);
 8fc:	54 9a       	sbi	0x0a, 4	; 10
    SETBIT(UCSRB, TXEN);
 8fe:	53 9a       	sbi	0x0a, 3	; 10

    /*** Enable Tx and Rx Complete Interrupts ***/
    SETBIT(UCSRB, RXCIE);
 900:	57 9a       	sbi	0x0a, 7	; 10
    SETBIT(UCSRB, TXCIE);
 902:	56 9a       	sbi	0x0a, 6	; 10

    /*** Set 8-bit mode ***/
    CLRBIT(UCSRB, UCSZ2);
 904:	52 98       	cbi	0x0a, 2	; 10

    /*** Select UCSRC Register ***/
    SETBIT(UCSRC, URSEL);
 906:	80 b5       	in	r24, 0x20	; 32
 908:	80 68       	ori	r24, 0x80	; 128
 90a:	80 bd       	out	0x20, r24	; 32

    /*** Set 8-bit mode ***/
    SETBIT(UCSRC, UCSZ0);
 90c:	80 b5       	in	r24, 0x20	; 32
 90e:	82 60       	ori	r24, 0x02	; 2
 910:	80 bd       	out	0x20, r24	; 32
    SETBIT(UCSRC, UCSZ1);
 912:	80 b5       	in	r24, 0x20	; 32
 914:	84 60       	ori	r24, 0x04	; 4
 916:	80 bd       	out	0x20, r24	; 32


    /*** Set Parity mode ***/
    #if (UART_PARITY == NO_PARITY)
        CLRBIT(UCSRC, UPM0);
 918:	80 b5       	in	r24, 0x20	; 32
 91a:	8f 7e       	andi	r24, 0xEF	; 239
 91c:	80 bd       	out	0x20, r24	; 32
        CLRBIT(UCSRC, UPM1);
 91e:	80 b5       	in	r24, 0x20	; 32
 920:	8f 7d       	andi	r24, 0xDF	; 223
 922:	80 bd       	out	0x20, r24	; 32
        SETBIT(UCSRC, UPM1);
    #endif

    /*** Set Stop bit ***/
    #if (UART_STOP_BIT == STOP_BIT_1)
        CLRBIT(UCSRC, USBS);
 924:	80 b5       	in	r24, 0x20	; 32
 926:	87 7f       	andi	r24, 0xF7	; 247
 928:	80 bd       	out	0x20, r24	; 32
    /*** Set Baud Rate ***/
    #if (UART_BAUD_RATE == BAUD_RATE_4800)
        UBRRH = 0;
        UBRRL = 25;
    #elif (UART_BAUD_RATE == BAUD_RATE_9600)
        UBRRH = 0;
 92a:	10 bc       	out	0x20, r1	; 32
        UBRRL = 12;
 92c:	8c e0       	ldi	r24, 0x0C	; 12
 92e:	89 b9       	out	0x09, r24	; 9
 930:	08 95       	ret

00000932 <UART_voidSetDataRegister>:

}

void UART_voidSetDataRegister(u8 Local_Data)
{
    UDR = Local_Data;
 932:	8c b9       	out	0x0c, r24	; 12
 934:	08 95       	ret

00000936 <UART_u8GetDataRegister>:
}

u8 UART_u8GetDataRegister(void)
{
    return UDR;
 936:	8c b1       	in	r24, 0x0c	; 12
}
 938:	08 95       	ret

0000093a <UART_voidSetTxComplete_ISR>:

void UART_voidSetTxComplete_ISR(void (*Local_ISR)(void))
{
    TX_COMPLETE_ISR = Local_ISR;
 93a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <TX_COMPLETE_ISR+0x1>
 93e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TX_COMPLETE_ISR>
 942:	08 95       	ret

00000944 <UART_voidSetRxComplete_ISR>:
}

void UART_voidSetRxComplete_ISR(void (*Local_ISR)(void))
{
    RX_COMPLETE_ISR = Local_ISR;
 944:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <RX_COMPLETE_ISR+0x1>
 948:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <RX_COMPLETE_ISR>
 94c:	08 95       	ret

0000094e <__vector_13>:
}

ISR(USART_TXC_vect)
{
 94e:	1f 92       	push	r1
 950:	0f 92       	push	r0
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	0f 92       	push	r0
 956:	11 24       	eor	r1, r1
 958:	2f 93       	push	r18
 95a:	3f 93       	push	r19
 95c:	4f 93       	push	r20
 95e:	5f 93       	push	r21
 960:	6f 93       	push	r22
 962:	7f 93       	push	r23
 964:	8f 93       	push	r24
 966:	9f 93       	push	r25
 968:	af 93       	push	r26
 96a:	bf 93       	push	r27
 96c:	ef 93       	push	r30
 96e:	ff 93       	push	r31
    TX_COMPLETE_ISR();
 970:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TX_COMPLETE_ISR>
 974:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <TX_COMPLETE_ISR+0x1>
 978:	09 95       	icall
}
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	bf 91       	pop	r27
 980:	af 91       	pop	r26
 982:	9f 91       	pop	r25
 984:	8f 91       	pop	r24
 986:	7f 91       	pop	r23
 988:	6f 91       	pop	r22
 98a:	5f 91       	pop	r21
 98c:	4f 91       	pop	r20
 98e:	3f 91       	pop	r19
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__vector_11>:

ISR(USART_RXC_vect)
{
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	2f 93       	push	r18
 9a8:	3f 93       	push	r19
 9aa:	4f 93       	push	r20
 9ac:	5f 93       	push	r21
 9ae:	6f 93       	push	r22
 9b0:	7f 93       	push	r23
 9b2:	8f 93       	push	r24
 9b4:	9f 93       	push	r25
 9b6:	af 93       	push	r26
 9b8:	bf 93       	push	r27
 9ba:	ef 93       	push	r30
 9bc:	ff 93       	push	r31
    RX_COMPLETE_ISR();
 9be:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <RX_COMPLETE_ISR>
 9c2:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <RX_COMPLETE_ISR+0x1>
 9c6:	09 95       	icall
}
 9c8:	ff 91       	pop	r31
 9ca:	ef 91       	pop	r30
 9cc:	bf 91       	pop	r27
 9ce:	af 91       	pop	r26
 9d0:	9f 91       	pop	r25
 9d2:	8f 91       	pop	r24
 9d4:	7f 91       	pop	r23
 9d6:	6f 91       	pop	r22
 9d8:	5f 91       	pop	r21
 9da:	4f 91       	pop	r20
 9dc:	3f 91       	pop	r19
 9de:	2f 91       	pop	r18
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__divmodsi4>:
 9ea:	05 2e       	mov	r0, r21
 9ec:	97 fb       	bst	r25, 7
 9ee:	1e f4       	brtc	.+6      	; 0x9f6 <__divmodsi4+0xc>
 9f0:	00 94       	com	r0
 9f2:	0e 94 0c 05 	call	0xa18	; 0xa18 <__negsi2>
 9f6:	57 fd       	sbrc	r21, 7
 9f8:	07 d0       	rcall	.+14     	; 0xa08 <__divmodsi4_neg2>
 9fa:	0e 94 1a 05 	call	0xa34	; 0xa34 <__udivmodsi4>
 9fe:	07 fc       	sbrc	r0, 7
 a00:	03 d0       	rcall	.+6      	; 0xa08 <__divmodsi4_neg2>
 a02:	4e f4       	brtc	.+18     	; 0xa16 <__divmodsi4_exit>
 a04:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__negsi2>

00000a08 <__divmodsi4_neg2>:
 a08:	50 95       	com	r21
 a0a:	40 95       	com	r20
 a0c:	30 95       	com	r19
 a0e:	21 95       	neg	r18
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	4f 4f       	sbci	r20, 0xFF	; 255
 a14:	5f 4f       	sbci	r21, 0xFF	; 255

00000a16 <__divmodsi4_exit>:
 a16:	08 95       	ret

00000a18 <__negsi2>:
 a18:	90 95       	com	r25
 a1a:	80 95       	com	r24
 a1c:	70 95       	com	r23
 a1e:	61 95       	neg	r22
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	8f 4f       	sbci	r24, 0xFF	; 255
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	08 95       	ret

00000a28 <__tablejump2__>:
 a28:	ee 0f       	add	r30, r30
 a2a:	ff 1f       	adc	r31, r31
 a2c:	05 90       	lpm	r0, Z+
 a2e:	f4 91       	lpm	r31, Z
 a30:	e0 2d       	mov	r30, r0
 a32:	09 94       	ijmp

00000a34 <__udivmodsi4>:
 a34:	a1 e2       	ldi	r26, 0x21	; 33
 a36:	1a 2e       	mov	r1, r26
 a38:	aa 1b       	sub	r26, r26
 a3a:	bb 1b       	sub	r27, r27
 a3c:	fd 01       	movw	r30, r26
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <__udivmodsi4_ep>

00000a40 <__udivmodsi4_loop>:
 a40:	aa 1f       	adc	r26, r26
 a42:	bb 1f       	adc	r27, r27
 a44:	ee 1f       	adc	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	a2 17       	cp	r26, r18
 a4a:	b3 07       	cpc	r27, r19
 a4c:	e4 07       	cpc	r30, r20
 a4e:	f5 07       	cpc	r31, r21
 a50:	20 f0       	brcs	.+8      	; 0xa5a <__udivmodsi4_ep>
 a52:	a2 1b       	sub	r26, r18
 a54:	b3 0b       	sbc	r27, r19
 a56:	e4 0b       	sbc	r30, r20
 a58:	f5 0b       	sbc	r31, r21

00000a5a <__udivmodsi4_ep>:
 a5a:	66 1f       	adc	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	1a 94       	dec	r1
 a64:	69 f7       	brne	.-38     	; 0xa40 <__udivmodsi4_loop>
 a66:	60 95       	com	r22
 a68:	70 95       	com	r23
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	9b 01       	movw	r18, r22
 a70:	ac 01       	movw	r20, r24
 a72:	bd 01       	movw	r22, r26
 a74:	cf 01       	movw	r24, r30
 a76:	08 95       	ret

00000a78 <_exit>:
 a78:	f8 94       	cli

00000a7a <__stop_program>:
 a7a:	ff cf       	rjmp	.-2      	; 0xa7a <__stop_program>
